/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Packet =
    | {
    messages: Message[];
    meta: MessagePacketMeta;
    tick: number;
    type: "Signon";
    [k: string]: unknown;
}
    | {
    messages: Message[];
    meta: MessagePacketMeta;
    tick: number;
    type: "Message";
    [k: string]: unknown;
}
    | {
    tick: number;
    type: "SyncTick";
    [k: string]: unknown;
}
    | {
    command: string;
    tick: number;
    type: "ConsoleCmd";
    [k: string]: unknown;
}
    | {
    cmd: UserCmd;
    sequence_out: number;
    tick: number;
    type: "UserCmd";
    [k: string]: unknown;
}
    | {
    server_classes: ServerClass[];
    tables: ParseSendTable[];
    tick: number;
    type: "DataTables";
    [k: string]: unknown;
}
    | {
    tick: number;
    type: "Stop";
    [k: string]: unknown;
}
    | {
    tables: StringTable[];
    tick: number;
    type: "StringTables";
    [k: string]: unknown;
};
export type Message =
    | {
    type: "Empty";
    [k: string]: unknown;
}
    | {
    file_name: string;
    requested: boolean;
    transfer_id: number;
    type: "File";
    [k: string]: unknown;
}
    | {
    frame_time: number;
    std_dev: number;
    tick: number;
    type: "NetTick";
    [k: string]: unknown;
}
    | {
    command: string;
    type: "StringCmd";
    [k: string]: unknown;
}
    | {
    length: number;
    type: "SetConVar";
    vars: ConVar[];
    [k: string]: unknown;
}
    | {
    count: number;
    state: SignOnState;
    type: "SignOnState";
    [k: string]: unknown;
}
    | {
    type: "Print";
    value: string;
    [k: string]: unknown;
}
    | {
    dedicated: boolean;
    game: string;
    interval_per_tick: number;
    map: string;
    map_hash: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
    ];
    max_classes: number;
    max_crc: number;
    max_player_count: number;
    platform: string;
    player_slot: number;
    replay: boolean;
    server_count: number;
    server_name: string;
    skybox: string;
    stv: boolean;
    type: "ServerInfo";
    version: number;
    [k: string]: unknown;
}
    | {
    count: number;
    create: boolean;
    entries: ClassInfoEntry[];
    type: "ClassInfo";
    [k: string]: unknown;
}
    | {
    pause: boolean;
    type: "SetPause";
    [k: string]: unknown;
}
    | {
    table: StringTable;
    type: "CreateStringTable";
    [k: string]: unknown;
}
    | {
    entries: [number, StringTableEntry][];
    table_id: number;
    type: "UpdateStringTable";
    [k: string]: unknown;
}
    | {
    codec: string;
    quality: number;
    sampling_rate: number;
    type: "VoiceInit";
    [k: string]: unknown;
}
    | {
    client: number;
    data: BitReadStream;
    length: number;
    proximity: number;
    type: "VoiceData";
    [k: string]: unknown;
}
    | {
    data: BitReadStream;
    length: number;
    num: number;
    reliable: boolean;
    type: "ParseSounds";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "SetView";
    [k: string]: unknown;
}
    | {
    relative: boolean;
    type: "FixAngle";
    x: number;
    y: number;
    z: number;
    [k: string]: unknown;
}
    | {
    ent_index: number;
    low_priority: boolean;
    model_index: number;
    position: Vector;
    texture_index: number;
    type: "BspDecal";
    [k: string]: unknown;
}
    | (
    | {
    client: number;
    from?: string | null;
    kind: ChatMessageKind;
    raw: number;
    text: string;
    type: "SayText2";
    [k: string]: unknown;
}
    | {
    location: HudTextLocation;
    substitute: [string, string, string, string];
    text: string;
    type: "Text";
    [k: string]: unknown;
}
    | {
    data: number;
    type: "ResetHUD";
    [k: string]: unknown;
}
    | {
    data: number;
    type: "Train";
    [k: string]: unknown;
}
    | {
    client: number;
    item: number;
    menu: number;
    type: "VoiceSubtitle";
    [k: string]: unknown;
}
    | {
    amplitude: number;
    command: number;
    duration: number;
    frequency: number;
    type: "Shake";
    [k: string]: unknown;
}
    | {
    data: BitReadStream;
    raw_type: number;
    type: "Unknown";
    [k: string]: unknown;
}
    )
    | {
    class_id: number;
    data: BitReadStream;
    index: number;
    length: number;
    type: "EntityMessage";
    [k: string]: unknown;
}
    | {
    event: GameEvent;
    event_type_id: GameEventTypeId;
    type: "GameEvent";
    [k: string]: unknown;
}
    | {
    base_line: number;
    delta?: number | null;
    entities: PacketEntity[];
    max_entries: number;
    removed_entities: EntityId[];
    type: "PacketEntities";
    updated_base_line: boolean;
    [k: string]: unknown;
}
    | {
    events: EventInfo[];
    type: "TempEntities";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "PreFetch";
    [k: string]: unknown;
}
    | {
    index: BitReadStream;
    kind: number;
    length: number;
    type: "Menu";
    [k: string]: unknown;
}
    | {
    event_list: GameEventDefinition[];
    type: "GameEventList";
    [k: string]: unknown;
}
    | {
    cookie: number;
    type: "GetCvarValue";
    value: string;
    [k: string]: unknown;
}
    | {
    data: BitReadStream;
    length: number;
    type: "CmdKeyValues";
    [k: string]: unknown;
};
export type SignOnState = "None" | "Challenge" | "Connected" | "New" | "PreSpawn" | "Spawn" | "Full" | "ChangeLevel";
export type ChatMessageKind =
    | "TF_Chat_All"
    | "TF_Chat_Team"
    | "TF_Chat_AllDead"
    | "TF_Chat_Team_Dead"
    | "TF_Chat_AllSpec"
    | "NameChange"
    | "Empty";
export type HudTextLocation = "PrintNotify" | "PrintConsole" | "PrintTalk" | "PrintCenter";
export type GameEvent =
    | {
    address: string;
    dedicated: boolean;
    game: string;
    hostname: string;
    ip: number;
    map_name: string;
    max_players: number;
    os: string;
    password: boolean;
    port: number;
    type: "ServerSpawn";
    [k: string]: unknown;
}
    | {
    level_name: string;
    type: "ServerChangeLevelFailed";
    [k: string]: unknown;
}
    | {
    reason: string;
    type: "ServerShutdown";
    [k: string]: unknown;
}
    | {
    cvar_name: string;
    cvar_value: string;
    type: "ServerCvar";
    [k: string]: unknown;
}
    | {
    text: string;
    type: "ServerMessage";
    [k: string]: unknown;
}
    | {
    by: string;
    duration: string;
    ip: string;
    kicked: boolean;
    name: string;
    network_id: string;
    type: "ServerAddBan";
    user_id: number;
    [k: string]: unknown;
}
    | {
    by: string;
    ip: string;
    network_id: string;
    type: "ServerRemoveBan";
    [k: string]: unknown;
}
    | {
    address: string;
    bot: number;
    index: number;
    name: string;
    network_id: string;
    type: "PlayerConnect";
    user_id: number;
    [k: string]: unknown;
}
    | {
    bot: number;
    index: number;
    name: string;
    network_id: string;
    type: "PlayerConnectClient";
    user_id: number;
    [k: string]: unknown;
}
    | {
    bot: boolean;
    index: number;
    name: string;
    network_id: string;
    type: "PlayerInfo";
    user_id: number;
    [k: string]: unknown;
}
    | {
    bot: number;
    name: string;
    network_id: string;
    reason: string;
    type: "PlayerDisconnect";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "PlayerActivate";
    user_id: number;
    [k: string]: unknown;
}
    | {
    text: string;
    type: "PlayerSay";
    user_id: number;
    [k: string]: unknown;
}
    | {
    message: string;
    type: "ClientDisconnect";
    [k: string]: unknown;
}
    | {
    address: string;
    ip: number;
    port: number;
    source: string;
    type: "ClientBeginConnect";
    [k: string]: unknown;
}
    | {
    address: string;
    ip: number;
    port: number;
    type: "ClientConnected";
    [k: string]: unknown;
}
    | {
    address: string;
    ip: number;
    port: number;
    type: "ClientFullConnect";
    [k: string]: unknown;
}
    | {
    type: "HostQuit";
    [k: string]: unknown;
}
    | {
    team_id: number;
    team_name: string;
    type: "TeamInfo";
    [k: string]: unknown;
}
    | {
    score: number;
    team_id: number;
    type: "TeamScore";
    [k: string]: unknown;
}
    | {
    additional_flags: number;
    sound: string;
    team: number;
    type: "TeamPlayBroadcastAudio";
    [k: string]: unknown;
}
    | {
    auto_team: boolean;
    disconnect: boolean;
    name: string;
    old_team: number;
    silent: boolean;
    team: number;
    type: "PlayerTeam";
    user_id: number;
    [k: string]: unknown;
}
    | {
    class: string;
    type: "PlayerClass";
    user_id: number;
    [k: string]: unknown;
}
    | {
    assister: number;
    assister_fallback: string;
    attacker: number;
    crit_type: number;
    custom_kill: number;
    damage_bits: number;
    death_flags: number;
    duck_streak_assist: number;
    duck_streak_total: number;
    duck_streak_victim: number;
    ducks_streaked: number;
    inflictor_ent_index: number;
    kill_streak_assist: number;
    kill_streak_total: number;
    kill_streak_victim: number;
    kill_streak_wep: number;
    player_penetrate_count: number;
    rocket_jump: boolean;
    silent_kill: boolean;
    stun_flags: number;
    type: "PlayerDeath";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_def_index: number;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    all_see_crit: boolean;
    attacker: number;
    bonus_effect: number;
    crit: boolean;
    custom: number;
    damage_amount: number;
    health: number;
    mini_crit: boolean;
    show_disguised_crit: boolean;
    type: "PlayerHurt";
    user_id: number;
    weapon_id: number;
    [k: string]: unknown;
}
    | {
    team_only: boolean;
    text: string;
    type: "PlayerChat";
    user_id: number;
    [k: string]: unknown;
}
    | {
    deaths: number;
    kills: number;
    score: number;
    type: "PlayerScore";
    user_id: number;
    [k: string]: unknown;
}
    | {
    class: number;
    team: number;
    type: "PlayerSpawn";
    user_id: number;
    [k: string]: unknown;
}
    | {
    mode: number;
    type: "PlayerShoot";
    user_id: number;
    weapon: number;
    [k: string]: unknown;
}
    | {
    entity: number;
    type: "PlayerUse";
    user_id: number;
    [k: string]: unknown;
}
    | {
    new_name: string;
    old_name: string;
    type: "PlayerChangeName";
    user_id: number;
    [k: string]: unknown;
}
    | {
    hint_message: string;
    type: "PlayerHintMessage";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "BasePlayerTeleported";
    [k: string]: unknown;
}
    | {
    type: "GameInit";
    [k: string]: unknown;
}
    | {
    map_name: string;
    type: "GameNewMap";
    [k: string]: unknown;
}
    | {
    frag_limit: number;
    objective: string;
    rounds_limit: number;
    time_limit: number;
    type: "GameStart";
    [k: string]: unknown;
}
    | {
    type: "GameEnd";
    winner: number;
    [k: string]: unknown;
}
    | {
    frag_limit: number;
    objective: string;
    time_limit: number;
    type: "RoundStart";
    [k: string]: unknown;
}
    | {
    message: string;
    reason: number;
    type: "RoundEnd";
    winner: number;
    [k: string]: unknown;
}
    | {
    target: number;
    text: string;
    type: "GameMessage";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    material: number;
    type: "BreakBreakable";
    user_id: number;
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "BreakProp";
    user_id: number;
    [k: string]: unknown;
}
    | {
    damage_bits: number;
    ent_index_attacker: number;
    ent_index_inflictor: number;
    ent_index_killed: number;
    type: "EntityKilled";
    [k: string]: unknown;
}
    | {
    num_advanced: number;
    num_bronze: number;
    num_gold: number;
    num_silver: number;
    type: "BonusUpdated";
    [k: string]: unknown;
}
    | {
    achievement_name: string;
    cur_val: number;
    max_val: number;
    type: "AchievementEvent";
    [k: string]: unknown;
}
    | {
    achievement_id: number;
    cur_val: number;
    max_val: number;
    type: "AchievementIncrement";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "PhysgunPickup";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "FlareIgniteNpc";
    [k: string]: unknown;
}
    | {
    type: "HelicopterGrenadePuntMiss";
    [k: string]: unknown;
}
    | {
    type: "UserDataDownloaded";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "RagdollDissolved";
    [k: string]: unknown;
}
    | {
    new_mode: number;
    obs_target: number;
    old_mode: number;
    type: "HLTVChangedMode";
    [k: string]: unknown;
}
    | {
    mode: number;
    obs_target: number;
    old_target: number;
    type: "HLTVChangedTarget";
    [k: string]: unknown;
}
    | {
    type: "VoteEnded";
    [k: string]: unknown;
}
    | {
    initiator: number;
    issue: string;
    param_1: string;
    team: number;
    type: "VoteStarted";
    [k: string]: unknown;
}
    | {
    potential_votes: number;
    type: "VoteChanged";
    vote_option_1: number;
    vote_option_2: number;
    vote_option_3: number;
    vote_option_4: number;
    vote_option_5: number;
    [k: string]: unknown;
}
    | {
    details: string;
    param_1: string;
    team: number;
    type: "VotePassed";
    [k: string]: unknown;
}
    | {
    team: number;
    type: "VoteFailed";
    [k: string]: unknown;
}
    | {
    entity_id: number;
    team: number;
    type: "VoteCast";
    vote_option: number;
    [k: string]: unknown;
}
    | {
    count: number;
    option_1: string;
    option_2: string;
    option_3: string;
    option_4: string;
    option_5: string;
    type: "VoteOptions";
    [k: string]: unknown;
}
    | {
    type: "ReplaySaved";
    [k: string]: unknown;
}
    | {
    type: "EnteredPerformanceMode";
    [k: string]: unknown;
}
    | {
    type: "BrowseReplays";
    [k: string]: unknown;
}
    | {
    favorited: number;
    likes: number;
    type: "ReplayYoutubeStats";
    views: number;
    [k: string]: unknown;
}
    | {
    type: "InventoryUpdated";
    [k: string]: unknown;
}
    | {
    type: "CartUpdated";
    [k: string]: unknown;
}
    | {
    type: "StorePriceSheetUpdated";
    [k: string]: unknown;
}
    | {
    type: "EconInventoryConnected";
    [k: string]: unknown;
}
    | {
    type: "ItemSchemaInitialized";
    [k: string]: unknown;
}
    | {
    type: "GcNewSession";
    [k: string]: unknown;
}
    | {
    type: "GcLostSession";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "IntroFinish";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "IntroNextCamera";
    [k: string]: unknown;
}
    | {
    class: number;
    type: "PlayerChangeClass";
    user_id: number;
    [k: string]: unknown;
}
    | {
    seconds: number;
    type: "TfMapTimeRemaining";
    [k: string]: unknown;
}
    | {
    reason: string;
    type: "TfGameOver";
    [k: string]: unknown;
}
    | {
    capping_team: number;
    capping_team_score: number;
    type: "CtfFlagCaptured";
    [k: string]: unknown;
}
    | {
    type: "ControlPointInitialized";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ControlPointUpdateImages";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ControlPointUpdateLayout";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ControlPointUpdateCapping";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ControlPointUpdateOwner";
    [k: string]: unknown;
}
    | {
    area: number;
    player: number;
    type: "ControlPointStartTouch";
    [k: string]: unknown;
}
    | {
    area: number;
    player: number;
    type: "ControlPointEndTouch";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "ControlPointPulseElement";
    [k: string]: unknown;
}
    | {
    int_data: number;
    player: number;
    type: "ControlPointFakeCapture";
    [k: string]: unknown;
}
    | {
    int_data: number;
    player: number;
    type: "ControlPointFakeCaptureMultiplier";
    [k: string]: unknown;
}
    | {
    round: string;
    type: "TeamPlayRoundSelected";
    [k: string]: unknown;
}
    | {
    full_reset: boolean;
    type: "TeamPlayRoundStart";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayRoundActive";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayWaitingBegins";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayWaitingEnds";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayWaitingAboutToEnd";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayRestartRound";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayReadyRestart";
    [k: string]: unknown;
}
    | {
    seconds: number;
    type: "TeamPlayRoundRestartSeconds";
    [k: string]: unknown;
}
    | {
    team: number;
    type: "TeamPlayTeamReady";
    [k: string]: unknown;
}
    | {
    flag_cap_limit: number;
    full_round: number;
    losing_team_num_caps: number;
    round_time: number;
    team: number;
    type: "TeamPlayRoundWin";
    was_sudden_death: number;
    win_reason: number;
    [k: string]: unknown;
}
    | {
    type: "TeamPlayUpdateTimer";
    [k: string]: unknown;
}
    | {
    reason: number;
    type: "TeamPlayRoundStalemate";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayOvertimeBegin";
    [k: string]: unknown;
}
    | {
    type: "TeamPlayOvertimeEnd";
    [k: string]: unknown;
}
    | {
    type: "TeamPlaySuddenDeathBegin";
    [k: string]: unknown;
}
    | {
    type: "TeamPlaySuddenDeathEnd";
    [k: string]: unknown;
}
    | {
    reason: string;
    type: "TeamPlayGameOver";
    [k: string]: unknown;
}
    | {
    seconds: number;
    type: "TeamPlayMapTimeRemaining";
    [k: string]: unknown;
}
    | {
    time_remaining: number;
    type: "TeamPlayTimerFlash";
    [k: string]: unknown;
}
    | {
    seconds_added: number;
    timer: number;
    type: "TeamPlayTimerTimeAdded";
    [k: string]: unknown;
}
    | {
    cap_team: number;
    cap_time: number;
    cappers: string;
    cp: number;
    cp_name: string;
    team: number;
    type: "TeamPlayPointStartCapture";
    [k: string]: unknown;
}
    | {
    cappers: string;
    cp: number;
    cp_name: string;
    team: number;
    type: "TeamPlayPointCaptured";
    [k: string]: unknown;
}
    | {
    cp: number;
    cp_name: string;
    team: number;
    type: "TeamPlayPointLocked";
    [k: string]: unknown;
}
    | {
    cp: number;
    cp_name: string;
    team: number;
    type: "TeamPlayPointUnlocked";
    [k: string]: unknown;
}
    | {
    cp: number;
    cp_name: string;
    time_remaining: number;
    type: "TeamPlayCaptureBroken";
    [k: string]: unknown;
}
    | {
    blocker: number;
    cp: number;
    cp_name: string;
    type: "TeamPlayCaptureBlocked";
    victim: number;
    [k: string]: unknown;
}
    | {
    carrier: number;
    event_type: number;
    home: number;
    player: number;
    team: number;
    type: "TeamPlayFlagEvent";
    [k: string]: unknown;
}
    | {
    blue_score: number;
    blue_score_prev: number;
    cappers: string;
    flag_cap_limit: number;
    game_over: number;
    kill_stream_player_1: number;
    kill_stream_player_1_count: number;
    panel_style: number;
    player_1: number;
    player_1_points: number;
    player_2: number;
    player_2_points: number;
    player_3: number;
    player_3_points: number;
    red_score: number;
    red_score_prev: number;
    round_complete: number;
    rounds_remaining: number;
    type: "TeamPlayWinPanel";
    win_reason: number;
    winning_team: number;
    [k: string]: unknown;
}
    | {
    player: number;
    team: number;
    type: "TeamPlayTeamBalancedPlayer";
    [k: string]: unknown;
}
    | {
    type: "TeamPlaySetupFinished";
    [k: string]: unknown;
}
    | {
    alert_type: number;
    type: "TeamPlayAlert";
    [k: string]: unknown;
}
    | {
    map: string;
    next_map: string;
    text: string;
    type: "TrainingComplete";
    [k: string]: unknown;
}
    | {
    killer: number;
    type: "ShowFreezePanel";
    [k: string]: unknown;
}
    | {
    type: "HideFreezePanel";
    [k: string]: unknown;
}
    | {
    type: "FreezeCamStarted";
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerChangeTeam";
    [k: string]: unknown;
}
    | {
    score: number;
    type: "LocalPlayerScoreChanged";
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerChangeClass";
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerRespawn";
    [k: string]: unknown;
}
    | {
    building_type: number;
    object_mode: number;
    remove: number;
    type: "BuildingInfoChanged";
    [k: string]: unknown;
}
    | {
    disguised: boolean;
    type: "LocalPlayerChangeDisguise";
    [k: string]: unknown;
}
    | {
    new_value: number;
    old_value: number;
    type: "PlayerAccountChanged";
    [k: string]: unknown;
}
    | {
    type: "SpyPdaReset";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "FlagStatusUpdate";
    user_id: number;
    [k: string]: unknown;
}
    | {
    force_upload: boolean;
    type: "PlayerStatsUpdated";
    [k: string]: unknown;
}
    | {
    type: "PlayingCommentary";
    [k: string]: unknown;
}
    | {
    target_id: number;
    type: "PlayerChargeDeployed";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    object: number;
    type: "PlayerBuiltObject";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    is_builder: boolean;
    object: number;
    type: "PlayerUpgradedObject";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    object: number;
    type: "PlayerCarryObject";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    object: number;
    type: "PlayerDropObject";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    object_type: number;
    type: "ObjectRemoved";
    user_id: number;
    [k: string]: unknown;
}
    | {
    assister: number;
    attacker: number;
    index: number;
    object_type: number;
    type: "ObjectDestroyed";
    user_id: number;
    was_building: boolean;
    weapon: string;
    weapon_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    object_type: number;
    type: "ObjectDetonated";
    user_id: number;
    [k: string]: unknown;
}
    | {
    achievement: number;
    player: number;
    type: "AchievementEarned";
    [k: string]: unknown;
}
    | {
    type: "SpecTargetUpdated";
    [k: string]: unknown;
}
    | {
    name_change: boolean;
    new_name: string;
    ready_state: number;
    type: "TournamentStateUpdate";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "TournamentEnableCountdown";
    [k: string]: unknown;
}
    | {
    type: "PlayerCalledForMedic";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "PlayerAskedForBall";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerBecameObserver";
    [k: string]: unknown;
}
    | {
    medic_ent_index: number;
    pyro_ent_index: number;
    type: "PlayerIgnitedInv";
    victim_ent_index: number;
    [k: string]: unknown;
}
    | {
    pyro_ent_index: number;
    type: "PlayerIgnited";
    victim_ent_index: number;
    weapon_id: number;
    [k: string]: unknown;
}
    | {
    healer: number;
    item_definition_index: number;
    type: "PlayerExtinguished";
    victim: number;
    [k: string]: unknown;
}
    | {
    builder_id: number;
    dist: number;
    type: "PlayerTeleported";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "PlayerHealedMedicCall";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerChargeReady";
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerWindDown";
    [k: string]: unknown;
}
    | {
    medic_user_id: number;
    type: "PlayerInvulned";
    user_id: number;
    [k: string]: unknown;
}
    | {
    players: number;
    speed: number;
    team: number;
    type: "EscortSpeed";
    [k: string]: unknown;
}
    | {
    progress: number;
    reset: boolean;
    team: number;
    type: "EscortProgress";
    [k: string]: unknown;
}
    | {
    recede_time: number;
    team: number;
    type: "EscortRecede";
    [k: string]: unknown;
}
    | {
    type: "GameUIActivated";
    [k: string]: unknown;
}
    | {
    type: "GameUIHidden";
    [k: string]: unknown;
}
    | {
    player: number;
    points: number;
    type: "PlayerEscortScore";
    [k: string]: unknown;
}
    | {
    amount: number;
    ent_index: number;
    type: "PlayerHealOnHit";
    weapon_def_index: number;
    [k: string]: unknown;
}
    | {
    owner: number;
    target: number;
    type: "PlayerStealSandvich";
    [k: string]: unknown;
}
    | {
    show: boolean;
    type: "ShowClassLayout";
    [k: string]: unknown;
}
    | {
    show: boolean;
    type: "ShowVsPanel";
    [k: string]: unknown;
}
    | {
    amount: number;
    kind: number;
    type: "PlayerDamaged";
    [k: string]: unknown;
}
    | {
    message: number;
    player: number;
    type: "ArenaPlayerNotification";
    [k: string]: unknown;
}
    | {
    streak: number;
    team: number;
    type: "ArenaMatchMaxStreak";
    [k: string]: unknown;
}
    | {
    type: "ArenaRoundStart";
    [k: string]: unknown;
}
    | {
    blue_score: number;
    blue_score_prev: number;
    cappers: string;
    flag_cap_limit: number;
    panel_style: number;
    player_1: number;
    player_1_damage: number;
    player_1_healing: number;
    player_1_kills: number;
    player_1_lifetime: number;
    player_2: number;
    player_2_damage: number;
    player_2_healing: number;
    player_2_kills: number;
    player_2_lifetime: number;
    player_3: number;
    player_3_damage: number;
    player_3_healing: number;
    player_3_kills: number;
    player_3_lifetime: number;
    player_4: number;
    player_4_damage: number;
    player_4_healing: number;
    player_4_kills: number;
    player_4_lifetime: number;
    player_5: number;
    player_5_damage: number;
    player_5_healing: number;
    player_5_kills: number;
    player_5_lifetime: number;
    player_6: number;
    player_6_damage: number;
    player_6_healing: number;
    player_6_kills: number;
    player_6_lifetime: number;
    red_score: number;
    red_score_prev: number;
    round_complete: number;
    type: "ArenaWinPanel";
    win_reason: number;
    winning_team: number;
    [k: string]: unknown;
}
    | {
    panel_style: number;
    type: "PveWinPanel";
    win_reason: number;
    winning_team: number;
    [k: string]: unknown;
}
    | {
    player: number;
    type: "AirDash";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "Landed";
    [k: string]: unknown;
}
    | {
    damage: number;
    type: "PlayerDamageDodged";
    [k: string]: unknown;
}
    | {
    big_stun: boolean;
    stunner: number;
    type: "PlayerStunned";
    victim: number;
    victim_capping: boolean;
    [k: string]: unknown;
}
    | {
    scout_id: number;
    target_id: number;
    type: "ScoutGrandSlam";
    [k: string]: unknown;
}
    | {
    target_index: number;
    type: "ScoutSlamdollLanded";
    x: number;
    y: number;
    z: number;
    [k: string]: unknown;
}
    | {
    attached_entity: number;
    bone_angles_x: number;
    bone_angles_y: number;
    bone_angles_z: number;
    bone_index_attached: number;
    bone_position_x: number;
    bone_position_y: number;
    bone_position_z: number;
    is_crit: boolean;
    projectile_type: number;
    shooter: number;
    type: "ArrowImpact";
    [k: string]: unknown;
}
    | {
    thrower_ent_index: number;
    type: "PlayerJarated";
    victim_ent_index: number;
    [k: string]: unknown;
}
    | {
    thrower_ent_index: number;
    type: "PlayerJaratedFade";
    victim_ent_index: number;
    [k: string]: unknown;
}
    | {
    attacker_ent_index: number;
    blocker_ent_index: number;
    type: "PlayerShieldBlocked";
    [k: string]: unknown;
}
    | {
    pinned: number;
    type: "PlayerPinned";
    [k: string]: unknown;
}
    | {
    medic: number;
    type: "PlayerHealedByMedic";
    [k: string]: unknown;
}
    | {
    object: number;
    owner_id: number;
    sapper_id: number;
    type: "PlayerSappedObject";
    user_id: number;
    [k: string]: unknown;
}
    | {
    is_strange: number;
    is_unusual: number;
    item_def: number;
    method: number;
    player: number;
    quality: number;
    type: "ItemFound";
    wear: number;
    [k: string]: unknown;
}
    | {
    follow_ent_index: number;
    id: number;
    lifetime: number;
    play_sound: string;
    show_distance: boolean;
    show_effect: boolean;
    text: string;
    type: "ShowAnnotation";
    visibility_bit_field: number;
    world_normal_x: number;
    world_normal_y: number;
    world_normal_z: number;
    world_pos_x: number;
    world_pos_y: number;
    world_pos_z: number;
    [k: string]: unknown;
}
    | {
    id: number;
    type: "HideAnnotation";
    [k: string]: unknown;
}
    | {
    type: "PostInventoryApplication";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    time: number;
    type: "ControlPointUnlockUpdated";
    [k: string]: unknown;
}
    | {
    buff_owner: number;
    buff_type: number;
    type: "DeployBuffBanner";
    [k: string]: unknown;
}
    | {
    buff_owner: number;
    buff_type: number;
    type: "PlayerBuff";
    user_id: number;
    [k: string]: unknown;
}
    | {
    attacker: number;
    charged: boolean;
    healing: number;
    type: "MedicDeath";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "OvertimeNag";
    [k: string]: unknown;
}
    | {
    type: "TeamsChanged";
    [k: string]: unknown;
}
    | {
    type: "HalloweenPumpkinGrab";
    user_id: number;
    [k: string]: unknown;
}
    | {
    play_sound: boolean;
    type: "RocketJump";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "RocketJumpLanded";
    user_id: number;
    [k: string]: unknown;
}
    | {
    play_sound: boolean;
    type: "StickyJump";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "StickyJumpLanded";
    user_id: number;
    [k: string]: unknown;
}
    | {
    play_sound: boolean;
    type: "RocketPackLaunch";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "RocketPackLanded";
    user_id: number;
    [k: string]: unknown;
}
    | {
    medic: number;
    type: "MedicDefended";
    user_id: number;
    [k: string]: unknown;
}
    | {
    amount: number;
    type: "LocalPlayerHealed";
    [k: string]: unknown;
}
    | {
    type: "PlayerDestroyedPipeBomb";
    user_id: number;
    [k: string]: unknown;
}
    | {
    object_ent_index: number;
    owner_id: number;
    type: "ObjectDeflected";
    user_id: number;
    weapon_id: number;
    [k: string]: unknown;
}
    | {
    player: number;
    type: "PlayerMvp";
    [k: string]: unknown;
}
    | {
    type: "RaidSpawnMob";
    [k: string]: unknown;
}
    | {
    type: "RaidSpawnSquad";
    [k: string]: unknown;
}
    | {
    area: number;
    blocked: boolean;
    type: "NavBlocked";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "PathTrackPassed";
    [k: string]: unknown;
}
    | {
    count: number;
    index: number;
    type: "NumCappersChanged";
    [k: string]: unknown;
}
    | {
    type: "PlayerRegenerate";
    [k: string]: unknown;
}
    | {
    index: number;
    object: number;
    type: "UpdateStatusItem";
    [k: string]: unknown;
}
    | {
    type: "StatsResetRound";
    [k: string]: unknown;
}
    | {
    type: "ScoreStatsAccumulatedUpdate";
    [k: string]: unknown;
}
    | {
    type: "ScoreStatsAccumulatedReset";
    [k: string]: unknown;
}
    | {
    achievement: number;
    type: "AchievementEarnedLocal";
    [k: string]: unknown;
}
    | {
    amount: number;
    healer: number;
    patient: number;
    type: "PlayerHealed";
    [k: string]: unknown;
}
    | {
    amount: number;
    building: number;
    healer: number;
    type: "BuildingHealed";
    [k: string]: unknown;
}
    | {
    item: string;
    type: "ItemPickup";
    user_id: number;
    [k: string]: unknown;
}
    | {
    initiator: number;
    initiator_score: number;
    killer: number;
    score_type: number;
    target: number;
    target_score: number;
    type: "DuelStatus";
    [k: string]: unknown;
}
    | {
    assister: number;
    assister_fallback: string;
    attacker: number;
    custom_kill: number;
    damage_bits: number;
    death_flags: number;
    inflictor_ent_index: number;
    silent_kill: boolean;
    stun_flags: number;
    type: "FishNotice";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    assister: number;
    assister_fallback: string;
    attacker: number;
    custom_kill: number;
    damage_bits: number;
    death_flags: number;
    inflictor_ent_index: number;
    silent_kill: boolean;
    stun_flags: number;
    type: "FishNoticeArm";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    assister: number;
    assister_fallback: string;
    attacker: number;
    custom_kill: number;
    damage_bits: number;
    death_flags: number;
    inflictor_ent_index: number;
    silent_kill: boolean;
    stun_flags: number;
    type: "SlapNotice";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    assister: number;
    assister_fallback: string;
    attacker: number;
    custom_kill: number;
    damage_bits: number;
    death_flags: number;
    inflictor_ent_index: number;
    silent_kill: boolean;
    stun_flags: number;
    total_hits: number;
    type: "ThrowableHit";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    type: "PumpkinLordSummoned";
    [k: string]: unknown;
}
    | {
    type: "PumpkinLordKilled";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "MerasmusSummoned";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "MerasmusKilled";
    [k: string]: unknown;
}
    | {
    level: number;
    time_remaining: number;
    type: "MerasmusEscapeWarning";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "MerasmusEscaped";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "EyeballBossSummoned";
    [k: string]: unknown;
}
    | {
    level: number;
    player_ent_index: number;
    type: "EyeballBossStunned";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "EyeballBossKilled";
    [k: string]: unknown;
}
    | {
    level: number;
    player_ent_index: number;
    type: "EyeballBossKiller";
    [k: string]: unknown;
}
    | {
    level: number;
    time_remaining: number;
    type: "EyeballBossEscapeImminent";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "EyeballBossEscaped";
    [k: string]: unknown;
}
    | {
    attacker_player: number;
    boss: number;
    crit: boolean;
    damage_amount: number;
    ent_index: number;
    health: number;
    type: "NpcHurt";
    weapon_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    time: number;
    type: "ControlPointTimerUpdated";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "PlayerHighFiveStart";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "PlayerHighFiveCancel";
    [k: string]: unknown;
}
    | {
    initiator_ent_index: number;
    partner_ent_index: number;
    type: "PlayerHighFiveSuccess";
    [k: string]: unknown;
}
    | {
    player_ent_index: number;
    points: number;
    source_ent_index: number;
    type: "PlayerBonusPoints";
    [k: string]: unknown;
}
    | {
    type: "PlayerUpgraded";
    [k: string]: unknown;
}
    | {
    cost: number;
    player: number;
    type: "PlayerBuyback";
    [k: string]: unknown;
}
    | {
    kind: number;
    player: number;
    time: number;
    type: "PlayerUsedPowerUpBottle";
    [k: string]: unknown;
}
    | {
    type: "ChristmasGiftGrab";
    user_id: number;
    [k: string]: unknown;
}
    | {
    attacker: number;
    type: "PlayerKilledAchievementZone";
    victim: number;
    zone_id: number;
    [k: string]: unknown;
}
    | {
    type: "PartyUpdated";
    [k: string]: unknown;
}
    | {
    type: "PartyPrefChanged";
    [k: string]: unknown;
}
    | {
    type: "PartyCriteriaChanged";
    [k: string]: unknown;
}
    | {
    type: "PartyInvitesChanged";
    [k: string]: unknown;
}
    | {
    match_group: number;
    type: "PartyQueueStateChanged";
    [k: string]: unknown;
}
    | {
    kind: number;
    steam_id: string;
    text: string;
    type: "PartyChat";
    [k: string]: unknown;
}
    | {
    steam_id: string;
    type: "PartyMemberJoin";
    [k: string]: unknown;
}
    | {
    steam_id: string;
    type: "PartyMemberLeave";
    [k: string]: unknown;
}
    | {
    type: "MatchInvitesUpdated";
    [k: string]: unknown;
}
    | {
    type: "LobbyUpdated";
    [k: string]: unknown;
}
    | {
    class: number;
    count: number;
    type: "MvmMissionUpdate";
    [k: string]: unknown;
}
    | {
    type: "RecalculateHolidays";
    [k: string]: unknown;
}
    | {
    currency: number;
    type: "PlayerCurrencyChanged";
    [k: string]: unknown;
}
    | {
    team: number;
    type: "DoomsdayRocketOpen";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "RemoveNemesisRelationships";
    [k: string]: unknown;
}
    | {
    type: "MvmCreditBonusWave";
    [k: string]: unknown;
}
    | {
    type: "MvmCreditBonusAll";
    [k: string]: unknown;
}
    | {
    type: "MvmCreditBonusAllAdvanced";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmQuickSentryUpgrade";
    [k: string]: unknown;
}
    | {
    type: "MvmTankDestroyedByPlayers";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmKillRobotDeliveringBomb";
    [k: string]: unknown;
}
    | {
    currency: number;
    player: number;
    type: "MvmPickupCurrency";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "MvmBombCarrierKilled";
    [k: string]: unknown;
}
    | {
    det_x: number;
    det_y: number;
    det_z: number;
    player: number;
    type: "MvmSentryBusterDetonate";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmScoutMarkedForDeath";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmMedicPowerUpShared";
    [k: string]: unknown;
}
    | {
    advanced: number;
    max_waves: number;
    type: "MvmBeginWave";
    wave_index: number;
    [k: string]: unknown;
}
    | {
    advanced: boolean;
    type: "MvmWaveComplete";
    [k: string]: unknown;
}
    | {
    mission: string;
    type: "MvmMissionComplete";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmBombResetByPlayer";
    [k: string]: unknown;
}
    | {
    type: "MvmBombAlarmTriggered";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MvmBombDeployResetByPlayer";
    [k: string]: unknown;
}
    | {
    type: "MvmWaveFailed";
    [k: string]: unknown;
}
    | {
    type: "MvmResetStats";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "DamageResisted";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    marker_ent_index: number;
    type: "RevivePlayerNotify";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "RevivePlayerStopped";
    [k: string]: unknown;
}
    | {
    ent_index: number;
    type: "RevivePlayerComplete";
    [k: string]: unknown;
}
    | {
    type: "PlayerTurnedToGhost";
    user_id: number;
    [k: string]: unknown;
}
    | {
    damage: number;
    type: "MedigunShieldBlockedDamage";
    user_id: number;
    [k: string]: unknown;
}
    | {
    index: number;
    type: "MvmAdvWaveCompleteNoGates";
    [k: string]: unknown;
}
    | {
    currency: number;
    type: "MvmSniperHeadshotCurrency";
    user_id: number;
    [k: string]: unknown;
}
    | {
    type: "MvmMannhattanPit";
    [k: string]: unknown;
}
    | {
    type: "FlagCarriedInDetectionZone";
    [k: string]: unknown;
}
    | {
    type: "MvmAdvWaveKilledStunRadio";
    [k: string]: unknown;
}
    | {
    attacker: number;
    type: "PlayerDirectHitStun";
    victim: number;
    [k: string]: unknown;
}
    | {
    sentry_buster: number;
    type: "MvmSentryBusterKilled";
    [k: string]: unknown;
}
    | {
    path: string;
    type: "UpgradesFileChanged";
    [k: string]: unknown;
}
    | {
    method: number;
    points: number;
    team: number;
    type: "RdTeamPointsChanged";
    [k: string]: unknown;
}
    | {
    type: "RdRulesStateChanged";
    [k: string]: unknown;
}
    | {
    attacker: number;
    custom_kill: number;
    damage_bits: number;
    inflictor_ent_index: number;
    type: "RdRobotKilled";
    user_id: number;
    victim_ent_index: number;
    weapon: string;
    weapon_id: number;
    weapon_log_class_name: string;
    [k: string]: unknown;
}
    | {
    ent_index: number;
    impulse_x: number;
    impulse_y: number;
    impulse_z: number;
    type: "RdRobotImpact";
    [k: string]: unknown;
}
    | {
    time: number;
    type: "TeamPlayPreRoundTimeLeft";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ParachuteDeploy";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "ParachuteHolster";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "KillRefillsMeter";
    [k: string]: unknown;
}
    | {
    loser: number;
    loser_rps: number;
    type: "RpsTauntEvent";
    winner: number;
    winner_rps: number;
    [k: string]: unknown;
}
    | {
    index: number;
    type: "CongaKill";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "PlayerInitialSpawn";
    [k: string]: unknown;
}
    | {
    type: "CompetitiveVictory";
    [k: string]: unknown;
}
    | {
    damage_rank: number;
    healing_rank: number;
    index: number;
    kills_rank: number;
    score_rank: number;
    support_rank: number;
    type: "CompetitiveStatsUpdate";
    [k: string]: unknown;
}
    | {
    kind: number;
    team: number;
    type: "MiniGameWin";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "SentryOnGoActive";
    [k: string]: unknown;
}
    | {
    level: number;
    type: "DuckXpLevelUp";
    [k: string]: unknown;
}
    | {
    type: "QuestLogOpened";
    [k: string]: unknown;
}
    | {
    type: "SchemaUpdated";
    [k: string]: unknown;
}
    | {
    type: "LocalPlayerPickupWeapon";
    [k: string]: unknown;
}
    | {
    amount: number;
    method: number;
    player: number;
    type: "RdPlayerScorePoints";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "DemomanDetStickies";
    [k: string]: unknown;
}
    | {
    quest_item_id_hi: number;
    quest_item_id_low: number;
    quest_objective_id: number;
    scorer_user_id: number;
    type: "QuestObjectiveCompleted";
    [k: string]: unknown;
}
    | {
    delta: number;
    player: number;
    type: "PlayerScoreChanged";
    [k: string]: unknown;
}
    | {
    assister: number;
    cp: number;
    killer: number;
    type: "KilledCappingPlayer";
    victim: number;
    [k: string]: unknown;
}
    | {
    killer: number;
    type: "EnvironmentalDeath";
    victim: number;
    [k: string]: unknown;
}
    | {
    attacker: number;
    type: "ProjectileDirectHit";
    victim: number;
    weapon_def_index: number;
    [k: string]: unknown;
}
    | {
    owner: number;
    type: "PassGet";
    [k: string]: unknown;
}
    | {
    assister: number;
    points: number;
    scorer: number;
    type: "PassScore";
    [k: string]: unknown;
}
    | {
    attacker: number;
    owner: number;
    type: "PassFree";
    [k: string]: unknown;
}
    | {
    catcher: number;
    dist: number;
    duration: number;
    passer: number;
    type: "PassPassCaught";
    [k: string]: unknown;
}
    | {
    attacker: number;
    type: "PassBallStolen";
    victim: number;
    [k: string]: unknown;
}
    | {
    blocker: number;
    owner: number;
    type: "PassBallBlocked";
    [k: string]: unknown;
}
    | {
    amount: number;
    condition: number;
    preventor: number;
    type: "DamagePrevented";
    victim: number;
    [k: string]: unknown;
}
    | {
    boss: number;
    killer: number;
    type: "HalloweenBossKilled";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "EscapedLootIsland";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "TaggedPlayerAsIt";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MerasmusStunned";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "MerasmusPropFound";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "HalloweenSkeletonKilled";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "EscapeHell";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "CrossSpectralBridge";
    [k: string]: unknown;
}
    | {
    game: number;
    player: number;
    type: "MiniGameWon";
    [k: string]: unknown;
}
    | {
    ghost: number;
    reviver: number;
    type: "RespawnGhost";
    [k: string]: unknown;
}
    | {
    killer: number;
    type: "KillInHell";
    victim: number;
    [k: string]: unknown;
}
    | {
    collector: number;
    type: "HalloweenDuckCollected";
    [k: string]: unknown;
}
    | {
    player: number;
    type: "SpecialScore";
    [k: string]: unknown;
}
    | {
    killer: number;
    type: "TeamLeaderKilled";
    victim: number;
    [k: string]: unknown;
}
    | {
    collecting_player: number;
    intended_target: number;
    soul_count: number;
    type: "HalloweenSoulCollected";
    [k: string]: unknown;
}
    | {
    type: "RecalculateTruce";
    [k: string]: unknown;
}
    | {
    attacker: number;
    spy: number;
    type: "DeadRingerCheatDeath";
    [k: string]: unknown;
}
    | {
    amount: number;
    healer: number;
    target: number;
    type: "CrossbowHeal";
    [k: string]: unknown;
}
    | {
    amount: number;
    damaged: number;
    item_definition_index: number;
    mitigator: number;
    type: "DamageMitigated";
    [k: string]: unknown;
}
    | {
    distance: number;
    pusher: number;
    type: "PayloadPushed";
    [k: string]: unknown;
}
    | {
    game_over: boolean;
    type: "PlayerAbandonedMatch";
    [k: string]: unknown;
}
    | {
    line: number;
    panel: number;
    player: number;
    type: "ClDrawline";
    x: number;
    y: number;
    [k: string]: unknown;
}
    | {
    time: number;
    type: "RestartTimerTime";
    [k: string]: unknown;
}
    | {
    type: "WinLimitChanged";
    [k: string]: unknown;
}
    | {
    type: "WinPanelShowScores";
    [k: string]: unknown;
}
    | {
    type: "TopStreamsRequestFinished";
    [k: string]: unknown;
}
    | {
    type: "CompetitiveStateChanged";
    [k: string]: unknown;
}
    | {
    type: "GlobalWarDataUpdated";
    [k: string]: unknown;
}
    | {
    type: "StopWatchChanged";
    [k: string]: unknown;
}
    | {
    type: "DsStop";
    [k: string]: unknown;
}
    | {
    delay: number;
    type: "DsScreenshot";
    [k: string]: unknown;
}
    | {
    type: "ShowMatchSummary";
    [k: string]: unknown;
}
    | {
    type: "ExperienceChanged";
    [k: string]: unknown;
}
    | {
    type: "BeginXpLerp";
    [k: string]: unknown;
}
    | {
    type: "MatchmakerStatsUpdated";
    [k: string]: unknown;
}
    | {
    success: boolean;
    type: "RematchVotePeriodOver";
    [k: string]: unknown;
}
    | {
    type: "RematchFailedToCreate";
    [k: string]: unknown;
}
    | {
    type: "PlayerRematchChange";
    [k: string]: unknown;
}
    | {
    type: "PingUpdated";
    [k: string]: unknown;
}
    | {
    type: "MMStatsUpdated";
    [k: string]: unknown;
}
    | {
    map_index: number;
    type: "PlayerNextMapVoteChange";
    vote: number;
    [k: string]: unknown;
}
    | {
    type: "VoteMapsChanged";
    [k: string]: unknown;
}
    | {
    created: boolean;
    definition_index: number;
    deleted: boolean;
    erase_history: boolean;
    kind: number;
    type: "ProtoDefChanged";
    [k: string]: unknown;
}
    | {
    dominated: number;
    dominations: number;
    dominator: number;
    type: "PlayerDomination";
    [k: string]: unknown;
}
    | {
    pushed: number;
    pusher: number;
    type: "PlayerRocketPackPushed";
    [k: string]: unknown;
}
    | {
    msg: string;
    request: number;
    type: "QuestRequest";
    [k: string]: unknown;
}
    | {
    msg: string;
    request: number;
    success: boolean;
    type: "QuestResponse";
    [k: string]: unknown;
}
    | {
    completed: boolean;
    kind: number;
    owner: number;
    quest_definition_index: number;
    scorer: number;
    type: "QuestProgress";
    [k: string]: unknown;
}
    | {
    attacker: number;
    num_direct_hit: number;
    num_hit: number;
    type: "ProjectileRemoved";
    weapon_def_index: number;
    [k: string]: unknown;
}
    | {
    type: "QuestMapDataChanged";
    [k: string]: unknown;
}
    | {
    douser: number;
    igniter: number;
    type: "GasDousedPlayerIgnited";
    victim: number;
    [k: string]: unknown;
}
    | {
    state: number;
    type: "QuestTurnInState";
    [k: string]: unknown;
}
    | {
    type: "ItemsAcknowledged";
    [k: string]: unknown;
}
    | {
    blocker: number;
    type: "CapperKilled";
    victim: number;
    [k: string]: unknown;
}
    | {
    type: "MainMenuStabilized";
    [k: string]: unknown;
}
    | {
    type: "WorldStatusChanged";
    [k: string]: unknown;
}
    | {
    clients: number;
    master: string;
    proxies: number;
    slots: number;
    type: "HLTVStatus";
    [k: string]: unknown;
}
    | {
    index: number;
    type: "HLTVCameraman";
    [k: string]: unknown;
}
    | {
    index: number;
    rank: number;
    target: number;
    type: "HLTVRankCamera";
    [k: string]: unknown;
}
    | {
    index: number;
    rank: number;
    target: number;
    type: "HLTVRankEntity";
    [k: string]: unknown;
}
    | {
    fov: number;
    offset: number;
    phi: number;
    pos_x: number;
    pos_y: number;
    pos_z: number;
    target: number;
    theta: number;
    type: "HLTVFixed";
    [k: string]: unknown;
}
    | {
    distance: number;
    in_eye: number;
    inertia: number;
    phi: number;
    target_1: number;
    target_2: number;
    theta: number;
    type: "HLTVChase";
    [k: string]: unknown;
}
    | {
    text: string;
    type: "HLTVMessage";
    [k: string]: unknown;
}
    | {
    text: string;
    type: "HLTVTitle";
    [k: string]: unknown;
}
    | {
    text: string;
    type: "HLTVChat";
    [k: string]: unknown;
}
    | {
    type: "ReplayStartRecord";
    [k: string]: unknown;
}
    | {
    cb: number;
    di: number;
    sn: string;
    st: number;
    type: "ReplaySessionInfo";
    [k: string]: unknown;
}
    | {
    type: "ReplayEndRecord";
    [k: string]: unknown;
}
    | {
    type: "ReplayReplaysAvailable";
    [k: string]: unknown;
}
    | {
    error: string;
    type: "ReplayServerError";
    [k: string]: unknown;
}
    | {
    event_type: GameEventType;
    type: "Unknown";
    values: GameEventValue[];
    [k: string]: unknown;
};
export type GameEventType =
    | (
    | "ServerSpawn"
    | "ServerChangeLevelFailed"
    | "ServerShutdown"
    | "ServerCvar"
    | "ServerMessage"
    | "ServerAddBan"
    | "ServerRemoveBan"
    | "PlayerConnect"
    | "PlayerConnectClient"
    | "PlayerInfo"
    | "PlayerDisconnect"
    | "PlayerActivate"
    | "PlayerSay"
    | "ClientDisconnect"
    | "ClientBeginConnect"
    | "ClientConnected"
    | "ClientFullConnect"
    | "HostQuit"
    | "TeamInfo"
    | "TeamScore"
    | "TeamPlayBroadcastAudio"
    | "PlayerTeam"
    | "PlayerClass"
    | "PlayerDeath"
    | "PlayerHurt"
    | "PlayerChat"
    | "PlayerScore"
    | "PlayerSpawn"
    | "PlayerShoot"
    | "PlayerUse"
    | "PlayerChangeName"
    | "PlayerHintMessage"
    | "BasePlayerTeleported"
    | "GameInit"
    | "GameNewMap"
    | "GameStart"
    | "GameEnd"
    | "RoundStart"
    | "RoundEnd"
    | "GameMessage"
    | "BreakBreakable"
    | "BreakProp"
    | "EntityKilled"
    | "BonusUpdated"
    | "AchievementEvent"
    | "AchievementIncrement"
    | "PhysgunPickup"
    | "FlareIgniteNpc"
    | "HelicopterGrenadePuntMiss"
    | "UserDataDownloaded"
    | "RagdollDissolved"
    | "HLTVChangedMode"
    | "HLTVChangedTarget"
    | "VoteEnded"
    | "VoteStarted"
    | "VoteChanged"
    | "VotePassed"
    | "VoteFailed"
    | "VoteCast"
    | "VoteOptions"
    | "ReplaySaved"
    | "EnteredPerformanceMode"
    | "BrowseReplays"
    | "ReplayYoutubeStats"
    | "InventoryUpdated"
    | "CartUpdated"
    | "StorePriceSheetUpdated"
    | "EconInventoryConnected"
    | "ItemSchemaInitialized"
    | "GcNewSession"
    | "GcLostSession"
    | "IntroFinish"
    | "IntroNextCamera"
    | "PlayerChangeClass"
    | "TfMapTimeRemaining"
    | "TfGameOver"
    | "CtfFlagCaptured"
    | "ControlPointInitialized"
    | "ControlPointUpdateImages"
    | "ControlPointUpdateLayout"
    | "ControlPointUpdateCapping"
    | "ControlPointUpdateOwner"
    | "ControlPointStartTouch"
    | "ControlPointEndTouch"
    | "ControlPointPulseElement"
    | "ControlPointFakeCapture"
    | "ControlPointFakeCaptureMultiplier"
    | "TeamPlayRoundSelected"
    | "TeamPlayRoundStart"
    | "TeamPlayRoundActive"
    | "TeamPlayWaitingBegins"
    | "TeamPlayWaitingEnds"
    | "TeamPlayWaitingAboutToEnd"
    | "TeamPlayRestartRound"
    | "TeamPlayReadyRestart"
    | "TeamPlayRoundRestartSeconds"
    | "TeamPlayTeamReady"
    | "TeamPlayRoundWin"
    | "TeamPlayUpdateTimer"
    | "TeamPlayRoundStalemate"
    | "TeamPlayOvertimeBegin"
    | "TeamPlayOvertimeEnd"
    | "TeamPlaySuddenDeathBegin"
    | "TeamPlaySuddenDeathEnd"
    | "TeamPlayGameOver"
    | "TeamPlayMapTimeRemaining"
    | "TeamPlayTimerFlash"
    | "TeamPlayTimerTimeAdded"
    | "TeamPlayPointStartCapture"
    | "TeamPlayPointCaptured"
    | "TeamPlayPointLocked"
    | "TeamPlayPointUnlocked"
    | "TeamPlayCaptureBroken"
    | "TeamPlayCaptureBlocked"
    | "TeamPlayFlagEvent"
    | "TeamPlayWinPanel"
    | "TeamPlayTeamBalancedPlayer"
    | "TeamPlaySetupFinished"
    | "TeamPlayAlert"
    | "TrainingComplete"
    | "ShowFreezePanel"
    | "HideFreezePanel"
    | "FreezeCamStarted"
    | "LocalPlayerChangeTeam"
    | "LocalPlayerScoreChanged"
    | "LocalPlayerChangeClass"
    | "LocalPlayerRespawn"
    | "BuildingInfoChanged"
    | "LocalPlayerChangeDisguise"
    | "PlayerAccountChanged"
    | "SpyPdaReset"
    | "FlagStatusUpdate"
    | "PlayerStatsUpdated"
    | "PlayingCommentary"
    | "PlayerChargeDeployed"
    | "PlayerBuiltObject"
    | "PlayerUpgradedObject"
    | "PlayerCarryObject"
    | "PlayerDropObject"
    | "ObjectRemoved"
    | "ObjectDestroyed"
    | "ObjectDetonated"
    | "AchievementEarned"
    | "SpecTargetUpdated"
    | "TournamentStateUpdate"
    | "TournamentEnableCountdown"
    | "PlayerCalledForMedic"
    | "PlayerAskedForBall"
    | "LocalPlayerBecameObserver"
    | "PlayerIgnitedInv"
    | "PlayerIgnited"
    | "PlayerExtinguished"
    | "PlayerTeleported"
    | "PlayerHealedMedicCall"
    | "LocalPlayerChargeReady"
    | "LocalPlayerWindDown"
    | "PlayerInvulned"
    | "EscortSpeed"
    | "EscortProgress"
    | "EscortRecede"
    | "GameUIActivated"
    | "GameUIHidden"
    | "PlayerEscortScore"
    | "PlayerHealOnHit"
    | "PlayerStealSandvich"
    | "ShowClassLayout"
    | "ShowVsPanel"
    | "PlayerDamaged"
    | "ArenaPlayerNotification"
    | "ArenaMatchMaxStreak"
    | "ArenaRoundStart"
    | "ArenaWinPanel"
    | "PveWinPanel"
    | "AirDash"
    | "Landed"
    | "PlayerDamageDodged"
    | "PlayerStunned"
    | "ScoutGrandSlam"
    | "ScoutSlamdollLanded"
    | "ArrowImpact"
    | "PlayerJarated"
    | "PlayerJaratedFade"
    | "PlayerShieldBlocked"
    | "PlayerPinned"
    | "PlayerHealedByMedic"
    | "PlayerSappedObject"
    | "ItemFound"
    | "ShowAnnotation"
    | "HideAnnotation"
    | "PostInventoryApplication"
    | "ControlPointUnlockUpdated"
    | "DeployBuffBanner"
    | "PlayerBuff"
    | "MedicDeath"
    | "OvertimeNag"
    | "TeamsChanged"
    | "HalloweenPumpkinGrab"
    | "RocketJump"
    | "RocketJumpLanded"
    | "StickyJump"
    | "StickyJumpLanded"
    | "RocketPackLaunch"
    | "RocketPackLanded"
    | "MedicDefended"
    | "LocalPlayerHealed"
    | "PlayerDestroyedPipeBomb"
    | "ObjectDeflected"
    | "PlayerMvp"
    | "RaidSpawnMob"
    | "RaidSpawnSquad"
    | "NavBlocked"
    | "PathTrackPassed"
    | "NumCappersChanged"
    | "PlayerRegenerate"
    | "UpdateStatusItem"
    | "StatsResetRound"
    | "ScoreStatsAccumulatedUpdate"
    | "ScoreStatsAccumulatedReset"
    | "AchievementEarnedLocal"
    | "PlayerHealed"
    | "BuildingHealed"
    | "ItemPickup"
    | "DuelStatus"
    | "FishNotice"
    | "FishNoticeArm"
    | "SlapNotice"
    | "ThrowableHit"
    | "PumpkinLordSummoned"
    | "PumpkinLordKilled"
    | "MerasmusSummoned"
    | "MerasmusKilled"
    | "MerasmusEscapeWarning"
    | "MerasmusEscaped"
    | "EyeballBossSummoned"
    | "EyeballBossStunned"
    | "EyeballBossKilled"
    | "EyeballBossKiller"
    | "EyeballBossEscapeImminent"
    | "EyeballBossEscaped"
    | "NpcHurt"
    | "ControlPointTimerUpdated"
    | "PlayerHighFiveStart"
    | "PlayerHighFiveCancel"
    | "PlayerHighFiveSuccess"
    | "PlayerBonusPoints"
    | "PlayerUpgraded"
    | "PlayerBuyback"
    | "PlayerUsedPowerUpBottle"
    | "ChristmasGiftGrab"
    | "PlayerKilledAchievementZone"
    | "PartyUpdated"
    | "PartyPrefChanged"
    | "PartyCriteriaChanged"
    | "PartyInvitesChanged"
    | "PartyQueueStateChanged"
    | "PartyChat"
    | "PartyMemberJoin"
    | "PartyMemberLeave"
    | "MatchInvitesUpdated"
    | "LobbyUpdated"
    | "MvmMissionUpdate"
    | "RecalculateHolidays"
    | "PlayerCurrencyChanged"
    | "DoomsdayRocketOpen"
    | "RemoveNemesisRelationships"
    | "MvmCreditBonusWave"
    | "MvmCreditBonusAll"
    | "MvmCreditBonusAllAdvanced"
    | "MvmQuickSentryUpgrade"
    | "MvmTankDestroyedByPlayers"
    | "MvmKillRobotDeliveringBomb"
    | "MvmPickupCurrency"
    | "MvmBombCarrierKilled"
    | "MvmSentryBusterDetonate"
    | "MvmScoutMarkedForDeath"
    | "MvmMedicPowerUpShared"
    | "MvmBeginWave"
    | "MvmWaveComplete"
    | "MvmMissionComplete"
    | "MvmBombResetByPlayer"
    | "MvmBombAlarmTriggered"
    | "MvmBombDeployResetByPlayer"
    | "MvmWaveFailed"
    | "MvmResetStats"
    | "DamageResisted"
    | "RevivePlayerNotify"
    | "RevivePlayerStopped"
    | "RevivePlayerComplete"
    | "PlayerTurnedToGhost"
    | "MedigunShieldBlockedDamage"
    | "MvmAdvWaveCompleteNoGates"
    | "MvmSniperHeadshotCurrency"
    | "MvmMannhattanPit"
    | "FlagCarriedInDetectionZone"
    | "MvmAdvWaveKilledStunRadio"
    | "PlayerDirectHitStun"
    | "MvmSentryBusterKilled"
    | "UpgradesFileChanged"
    | "RdTeamPointsChanged"
    | "RdRulesStateChanged"
    | "RdRobotKilled"
    | "RdRobotImpact"
    | "TeamPlayPreRoundTimeLeft"
    | "ParachuteDeploy"
    | "ParachuteHolster"
    | "KillRefillsMeter"
    | "RpsTauntEvent"
    | "CongaKill"
    | "PlayerInitialSpawn"
    | "CompetitiveVictory"
    | "CompetitiveStatsUpdate"
    | "MiniGameWin"
    | "SentryOnGoActive"
    | "DuckXpLevelUp"
    | "QuestLogOpened"
    | "SchemaUpdated"
    | "LocalPlayerPickupWeapon"
    | "RdPlayerScorePoints"
    | "DemomanDetStickies"
    | "QuestObjectiveCompleted"
    | "PlayerScoreChanged"
    | "KilledCappingPlayer"
    | "EnvironmentalDeath"
    | "ProjectileDirectHit"
    | "PassGet"
    | "PassScore"
    | "PassFree"
    | "PassPassCaught"
    | "PassBallStolen"
    | "PassBallBlocked"
    | "DamagePrevented"
    | "HalloweenBossKilled"
    | "EscapedLootIsland"
    | "TaggedPlayerAsIt"
    | "MerasmusStunned"
    | "MerasmusPropFound"
    | "HalloweenSkeletonKilled"
    | "EscapeHell"
    | "CrossSpectralBridge"
    | "MiniGameWon"
    | "RespawnGhost"
    | "KillInHell"
    | "HalloweenDuckCollected"
    | "SpecialScore"
    | "TeamLeaderKilled"
    | "HalloweenSoulCollected"
    | "RecalculateTruce"
    | "DeadRingerCheatDeath"
    | "CrossbowHeal"
    | "DamageMitigated"
    | "PayloadPushed"
    | "PlayerAbandonedMatch"
    | "ClDrawline"
    | "RestartTimerTime"
    | "WinLimitChanged"
    | "WinPanelShowScores"
    | "TopStreamsRequestFinished"
    | "CompetitiveStateChanged"
    | "GlobalWarDataUpdated"
    | "StopWatchChanged"
    | "DsStop"
    | "DsScreenshot"
    | "ShowMatchSummary"
    | "ExperienceChanged"
    | "BeginXpLerp"
    | "MatchmakerStatsUpdated"
    | "RematchVotePeriodOver"
    | "RematchFailedToCreate"
    | "PlayerRematchChange"
    | "PingUpdated"
    | "MMStatsUpdated"
    | "PlayerNextMapVoteChange"
    | "VoteMapsChanged"
    | "ProtoDefChanged"
    | "PlayerDomination"
    | "PlayerRocketPackPushed"
    | "QuestRequest"
    | "QuestResponse"
    | "QuestProgress"
    | "ProjectileRemoved"
    | "QuestMapDataChanged"
    | "GasDousedPlayerIgnited"
    | "QuestTurnInState"
    | "ItemsAcknowledged"
    | "CapperKilled"
    | "MainMenuStabilized"
    | "WorldStatusChanged"
    | "HLTVStatus"
    | "HLTVCameraman"
    | "HLTVRankCamera"
    | "HLTVRankEntity"
    | "HLTVFixed"
    | "HLTVChase"
    | "HLTVMessage"
    | "HLTVTitle"
    | "HLTVChat"
    | "ReplayStartRecord"
    | "ReplaySessionInfo"
    | "ReplayEndRecord"
    | "ReplayReplaysAvailable"
    | "ReplayServerError"
    )
    | {
    Unknown: string;
};
export type GameEventValue =
    | "Local"
    | {
    String: string;
}
    | {
    Float: number;
}
    | {
    Long: number;
}
    | {
    Short: number;
}
    | {
    Byte: number;
}
    | {
    Boolean: boolean;
};
export type GameEventTypeId = number;
export type SendPropIdentifier = string;
export type SendPropValue = Vector | VectorXY | number | number | string | SendPropValue[];
export type EntityId = number;
export type ClassId = number;
export type UpdateType = "Preserve" | "Leave" | "Enter" | "Delete";
export type GameEventValueType = "None" | "String" | "Float" | "Long" | "Short" | "Byte" | "Boolean" | "Local";
export type SendTableName = string;
export type ServerClassName = string;
export type SendPropFlags = number;
export type SendPropName = string;
export type SendPropType =
    | "Int"
    | "Float"
    | "Vector"
    | "VectorXY"
    | "String"
    | "Array"
    | "DataTable"
    | "NumSendPropTypes";

export interface ConVar {
    key: string;
    value: string;
    [k: string]: unknown;
}
export interface ClassInfoEntry {
    class_id: number;
    class_name: string;
    table_name: string;
    [k: string]: unknown;
}
export interface StringTable {
    client_entries?: StringTableEntry[] | null;
    compressed: boolean;
    entries: [number, StringTableEntry][];
    fixed_user_data_size?: FixedUserDataSize | null;
    max_entries: number;
    name: string;
    [k: string]: unknown;
}
export interface StringTableEntry {
    extra_data?: ExtraData | null;
    text?: string | null;
    [k: string]: unknown;
}
export interface ExtraData {
    byte_len: number;
    data: BitReadStream;
    [k: string]: unknown;
}
export interface BitReadStream {
    bit_length: number;
    data: number[];
    [k: string]: unknown;
}
export interface FixedUserDataSize {
    bits: number;
    size: number;
    [k: string]: unknown;
}
export interface Vector {
    x: number;
    y: number;
    z: number;
    [k: string]: unknown;
}
export interface PacketEntity {
    baseline_props: SendProp[];
    delay?: number | null;
    entity_index: EntityId;
    in_pvs: boolean;
    props: SendProp[];
    serial_number: number;
    server_class: ClassId;
    update_type: UpdateType;
    [k: string]: unknown;
}
export interface SendProp {
    identifier: SendPropIdentifier;
    index: number;
    value: SendPropValue;
    [k: string]: unknown;
}
export interface VectorXY {
    x: number;
    y: number;
    [k: string]: unknown;
}
export interface EventInfo {
    class_id: ClassId;
    fire_delay: number;
    props: SendProp[];
    reliable: boolean;
    [k: string]: unknown;
}
export interface GameEventDefinition {
    entries: GameEventEntry[];
    event_type: GameEventType;
    id: GameEventTypeId;
    [k: string]: unknown;
}
export interface GameEventEntry {
    kind: GameEventValueType;
    name: string;
    [k: string]: unknown;
}
export interface MessagePacketMeta {
    flags: number;
    sequence_in: number;
    sequence_out: number;
    view_angles: ViewAngles;
    [k: string]: unknown;
}
export interface ViewAngles {
    angles: [Vector, Vector];
    local_angles: [Vector, Vector];
    origin: [Vector, Vector];
    [k: string]: unknown;
}
export interface UserCmd {
    buttons?: number | null;
    command_number?: number | null;
    impulse?: number | null;
    mouse_dx?: number | null;
    mouse_dy?: number | null;
    movement: [number | null, number | null, number | null];
    tick_count?: number | null;
    view_angles: [number | null, number | null, number | null];
    weapon_select?: WeaponSelect | null;
    [k: string]: unknown;
}
export interface WeaponSelect {
    select: number;
    subtype?: number | null;
    [k: string]: unknown;
}
export interface ServerClass {
    data_table: SendTableName;
    id: ClassId;
    name: ServerClassName;
    [k: string]: unknown;
}
export interface ParseSendTable {
    name: SendTableName;
    needs_decoder: boolean;
    props: RawSendPropDefinition[];
    [k: string]: unknown;
}
export interface RawSendPropDefinition {
    array_property?: RawSendPropDefinition | null;
    bit_count?: number | null;
    element_count?: number | null;
    flags: SendPropFlags;
    high_value?: number | null;
    identifier: SendPropIdentifier;
    low_value?: number | null;
    name: SendPropName;
    original_bit_count?: number | null;
    prop_type: SendPropType;
    table_name?: SendTableName | null;
    [k: string]: unknown;
}
