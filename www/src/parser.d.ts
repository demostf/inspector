/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Packet =
  | {
      messages: Message[];
      meta: MessagePacketMeta;
      tick: DemoTick;
      type: "Signon";
      [k: string]: unknown;
    }
  | {
      messages: Message[];
      meta: MessagePacketMeta;
      tick: DemoTick;
      type: "Message";
      [k: string]: unknown;
    }
  | {
      tick: DemoTick;
      type: "SyncTick";
      [k: string]: unknown;
    }
  | {
      command: string;
      tick: DemoTick;
      type: "ConsoleCmd";
      [k: string]: unknown;
    }
  | {
      cmd: UserCmd;
      sequence_out: number;
      tick: DemoTick;
      type: "UserCmd";
      [k: string]: unknown;
    }
  | {
      server_classes: ServerClass[];
      tables: ParseSendTable[];
      tick: DemoTick;
      type: "DataTables";
      [k: string]: unknown;
    }
  | {
      tick: DemoTick;
      type: "Stop";
      [k: string]: unknown;
    }
  | {
      tables: StringTable[];
      tick: DemoTick;
      type: "StringTables";
      [k: string]: unknown;
    };
export type Message =
  | {
      type: "Empty";
      [k: string]: unknown;
    }
  | {
      file_name: string;
      requested: boolean;
      transfer_id: number;
      type: "File";
      [k: string]: unknown;
    }
  | {
      frame_time: number;
      std_dev: number;
      tick: ServerTick;
      type: "NetTick";
      [k: string]: unknown;
    }
  | {
      command: string;
      type: "StringCmd";
      [k: string]: unknown;
    }
  | {
      length: number;
      type: "SetConVar";
      vars: ConVar[];
      [k: string]: unknown;
    }
  | {
      count: number;
      state: SignOnState;
      type: "SignOnState";
      [k: string]: unknown;
    }
  | {
      type: "Print";
      value: String;
      [k: string]: unknown;
    }
  | {
      dedicated: boolean;
      game: string;
      interval_per_tick: number;
      map: string;
      /**
       * @minItems 16
       * @maxItems 16
       */
      map_hash: [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ];
      max_classes: number;
      max_crc: number;
      max_player_count: number;
      platform: string;
      player_slot: number;
      replay: boolean;
      server_count: number;
      server_name: string;
      skybox: string;
      stv: boolean;
      type: "ServerInfo";
      version: number;
      [k: string]: unknown;
    }
  | {
      count: number;
      create: boolean;
      entries: ClassInfoEntry[];
      type: "ClassInfo";
      [k: string]: unknown;
    }
  | {
      pause: boolean;
      type: "SetPause";
      [k: string]: unknown;
    }
  | {
      table: StringTable;
      type: "CreateStringTable";
      [k: string]: unknown;
    }
  | {
      entries: [number, StringTableEntry][];
      table_id: number;
      type: "UpdateStringTable";
      [k: string]: unknown;
    }
  | {
      codec: string;
      quality: number;
      sampling_rate: number;
      type: "VoiceInit";
      [k: string]: unknown;
    }
  | {
      client: number;
      data: BitReadStream;
      length: number;
      proximity: number;
      type: "VoiceData";
      [k: string]: unknown;
    }
  | {
      data: BitReadStream;
      length: number;
      num: number;
      reliable: boolean;
      type: "ParseSounds";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "SetView";
      [k: string]: unknown;
    }
  | {
      relative: boolean;
      type: "FixAngle";
      x: number;
      y: number;
      z: number;
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      low_priority: boolean;
      model_index: number;
      position: Vector;
      texture_index: number;
      type: "BspDecal";
      [k: string]: unknown;
    }
  | (
      | {
          client: EntityId;
          from?: String | null;
          kind: ChatMessageKind;
          raw: number;
          text: String;
          type: "SayText2";
          [k: string]: unknown;
        }
      | {
          location: HudTextLocation;
          /**
           * @minItems 4
           * @maxItems 4
           */
          substitute: [String, String, String, String];
          text: String;
          type: "Text";
          [k: string]: unknown;
        }
      | {
          data: number;
          type: "ResetHUD";
          [k: string]: unknown;
        }
      | {
          data: number;
          type: "Train";
          [k: string]: unknown;
        }
      | {
          client: number;
          item: number;
          menu: number;
          type: "VoiceSubtitle";
          [k: string]: unknown;
        }
      | {
          amplitude: number;
          command: number;
          duration: number;
          frequency: number;
          type: "Shake";
          [k: string]: unknown;
        }
      | {
          data: VGuiMenuMessageData[];
          name: String;
          show: number;
          type: "VGuiMenu";
          [k: string]: unknown;
        }
      | {
          rumble_data: number;
          rumble_flags: number;
          type: "Rumble";
          waveform_index: number;
          [k: string]: unknown;
        }
      | {
          /**
           * @minItems 4
           * @maxItems 4
           */
          color: [number, number, number, number];
          duration: number;
          flags: number;
          hold: number;
          type: "Fade";
          [k: string]: unknown;
        }
      | {
          data: number;
          type: "HapMeleeContact";
          [k: string]: unknown;
        }
      | {
          data: BitReadStream;
          raw_type: number;
          type: "Unknown";
          [k: string]: unknown;
        }
    )
  | {
      class_id: number;
      data: BitReadStream;
      index: number;
      length: number;
      type: "EntityMessage";
      [k: string]: unknown;
    }
  | {
      event: GameEvent;
      event_type: GameEventType;
      event_type_id: GameEventTypeId;
      type: "GameEvent";
      [k: string]: unknown;
    }
  | {
      base_line: number;
      delta?: ServerTick | null;
      entities: PacketEntity[];
      max_entries: number;
      removed_entities: EntityId[];
      type: "PacketEntities";
      updated_base_line: boolean;
      [k: string]: unknown;
    }
  | {
      events: EventInfo[];
      type: "TempEntities";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "PreFetch";
      [k: string]: unknown;
    }
  | {
      index: BitReadStream;
      kind: number;
      length: number;
      type: "Menu";
      [k: string]: unknown;
    }
  | {
      event_list: GameEventDefinition[];
      type: "GameEventList";
      [k: string]: unknown;
    }
  | {
      cookie: number;
      type: "GetCvarValue";
      value: string;
      [k: string]: unknown;
    }
  | {
      data: BitReadStream;
      length: number;
      type: "CmdKeyValues";
      [k: string]: unknown;
    };
/**
 * Tick relative to the start of the game on the server
 */
export type ServerTick = number;
export type SignOnState = "None" | "Challenge" | "Connected" | "New" | "PreSpawn" | "Spawn" | "Full" | "ChangeLevel";
export type String = string;
export type EntityId = number;
export type ChatMessageKind =
  | "TF_Chat_All"
  | "TF_Chat_Team"
  | "TF_Chat_AllDead"
  | "TF_Chat_Team_Dead"
  | "TF_Chat_AllSpec"
  | "NameChange"
  | "Empty";
export type HudTextLocation = "PrintNotify" | "PrintConsole" | "PrintTalk" | "PrintCenter";
export type GameEvent =
  | {
      address: String;
      dedicated: boolean;
      game: String;
      hostname: String;
      ip: number;
      map_name: String;
      max_players: number;
      os: String;
      password: boolean;
      port: number;
      type: "ServerSpawn";
      [k: string]: unknown;
    }
  | {
      level_name: String;
      type: "ServerChangeLevelFailed";
      [k: string]: unknown;
    }
  | {
      reason: String;
      type: "ServerShutdown";
      [k: string]: unknown;
    }
  | {
      cvar_name: String;
      cvar_value: String;
      type: "ServerCvar";
      [k: string]: unknown;
    }
  | {
      text: String;
      type: "ServerMessage";
      [k: string]: unknown;
    }
  | {
      by: String;
      duration: String;
      ip: String;
      kicked: boolean;
      name: String;
      network_id: String;
      type: "ServerAddBan";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      by: String;
      ip: String;
      network_id: String;
      type: "ServerRemoveBan";
      [k: string]: unknown;
    }
  | {
      address: String;
      bot: number;
      index: number;
      name: String;
      network_id: String;
      type: "PlayerConnect";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      bot: number;
      index: number;
      name: String;
      network_id: String;
      type: "PlayerConnectClient";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      bot: boolean;
      index: number;
      name: String;
      network_id: String;
      type: "PlayerInfo";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      bot: number;
      name: String;
      network_id: String;
      reason: String;
      type: "PlayerDisconnect";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "PlayerActivate";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      text: String;
      type: "PlayerSay";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      message: String;
      type: "ClientDisconnect";
      [k: string]: unknown;
    }
  | {
      address: String;
      ip: number;
      port: number;
      source: String;
      type: "ClientBeginConnect";
      [k: string]: unknown;
    }
  | {
      address: String;
      ip: number;
      port: number;
      type: "ClientConnected";
      [k: string]: unknown;
    }
  | {
      address: String;
      ip: number;
      port: number;
      type: "ClientFullConnect";
      [k: string]: unknown;
    }
  | {
      type: "HostQuit";
      [k: string]: unknown;
    }
  | {
      team_id: number;
      team_name: String;
      type: "TeamInfo";
      [k: string]: unknown;
    }
  | {
      score: number;
      team_id: number;
      type: "TeamScore";
      [k: string]: unknown;
    }
  | {
      additional_flags: number;
      player: number;
      sound: String;
      team: number;
      type: "TeamPlayBroadcastAudio";
      [k: string]: unknown;
    }
  | {
      auto_team: boolean;
      disconnect: boolean;
      name: String;
      old_team: number;
      silent: boolean;
      team: number;
      type: "PlayerTeam";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      class: String;
      type: "PlayerClass";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      assister: number;
      assister_fallback: String;
      attacker: number;
      crit_type: number;
      custom_kill: number;
      damage_bits: number;
      death_flags: number;
      duck_streak_assist: number;
      duck_streak_total: number;
      duck_streak_victim: number;
      ducks_streaked: number;
      inflictor_ent_index: number;
      kill_streak_assist: number;
      kill_streak_total: number;
      kill_streak_victim: number;
      kill_streak_wep: number;
      player_penetrate_count: number;
      rocket_jump: boolean;
      silent_kill: boolean;
      stun_flags: number;
      type: "PlayerDeath";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_def_index: number;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      all_see_crit: boolean;
      attacker: number;
      bonus_effect: number;
      crit: boolean;
      custom: number;
      damage_amount: number;
      health: number;
      mini_crit: boolean;
      show_disguised_crit: boolean;
      type: "PlayerHurt";
      user_id: number;
      weapon_id: number;
      [k: string]: unknown;
    }
  | {
      team_only: boolean;
      text: String;
      type: "PlayerChat";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      deaths: number;
      kills: number;
      score: number;
      type: "PlayerScore";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      class: number;
      team: number;
      type: "PlayerSpawn";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      mode: number;
      type: "PlayerShoot";
      user_id: number;
      weapon: number;
      [k: string]: unknown;
    }
  | {
      entity: number;
      type: "PlayerUse";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      new_name: String;
      old_name: String;
      type: "PlayerChangeName";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      hint_message: String;
      type: "PlayerHintMessage";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "BasePlayerTeleported";
      [k: string]: unknown;
    }
  | {
      type: "GameInit";
      [k: string]: unknown;
    }
  | {
      map_name: String;
      type: "GameNewMap";
      [k: string]: unknown;
    }
  | {
      frag_limit: number;
      objective: String;
      rounds_limit: number;
      time_limit: number;
      type: "GameStart";
      [k: string]: unknown;
    }
  | {
      type: "GameEnd";
      winner: number;
      [k: string]: unknown;
    }
  | {
      frag_limit: number;
      objective: String;
      time_limit: number;
      type: "RoundStart";
      [k: string]: unknown;
    }
  | {
      message: String;
      reason: number;
      type: "RoundEnd";
      winner: number;
      [k: string]: unknown;
    }
  | {
      target: number;
      text: String;
      type: "GameMessage";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      material: number;
      type: "BreakBreakable";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "BreakProp";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      damage_bits: number;
      ent_index_attacker: number;
      ent_index_inflictor: number;
      ent_index_killed: number;
      type: "EntityKilled";
      [k: string]: unknown;
    }
  | {
      num_advanced: number;
      num_bronze: number;
      num_gold: number;
      num_silver: number;
      type: "BonusUpdated";
      [k: string]: unknown;
    }
  | {
      achievement_name: String;
      cur_val: number;
      max_val: number;
      type: "AchievementEvent";
      [k: string]: unknown;
    }
  | {
      achievement_id: number;
      cur_val: number;
      max_val: number;
      type: "AchievementIncrement";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "PhysgunPickup";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "FlareIgniteNpc";
      [k: string]: unknown;
    }
  | {
      type: "HelicopterGrenadePuntMiss";
      [k: string]: unknown;
    }
  | {
      type: "UserDataDownloaded";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "RagdollDissolved";
      [k: string]: unknown;
    }
  | {
      new_mode: number;
      obs_target: number;
      old_mode: number;
      type: "HLTVChangedMode";
      [k: string]: unknown;
    }
  | {
      mode: number;
      obs_target: number;
      old_target: number;
      type: "HLTVChangedTarget";
      [k: string]: unknown;
    }
  | {
      type: "VoteEnded";
      [k: string]: unknown;
    }
  | {
      initiator: number;
      issue: String;
      param_1: String;
      team: number;
      type: "VoteStarted";
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      potential_votes: number;
      type: "VoteChanged";
      vote_option_1: number;
      vote_option_2: number;
      vote_option_3: number;
      vote_option_4: number;
      vote_option_5: number;
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      details: String;
      param_1: String;
      team: number;
      type: "VotePassed";
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      team: number;
      type: "VoteFailed";
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      entity_id: number;
      team: number;
      type: "VoteCast";
      vote_option: number;
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      count: number;
      option_1: String;
      option_2: String;
      option_3: String;
      option_4: String;
      option_5: String;
      type: "VoteOptions";
      voteidx: number;
      [k: string]: unknown;
    }
  | {
      type: "ReplaySaved";
      [k: string]: unknown;
    }
  | {
      type: "EnteredPerformanceMode";
      [k: string]: unknown;
    }
  | {
      type: "BrowseReplays";
      [k: string]: unknown;
    }
  | {
      favorited: number;
      likes: number;
      type: "ReplayYoutubeStats";
      views: number;
      [k: string]: unknown;
    }
  | {
      type: "InventoryUpdated";
      [k: string]: unknown;
    }
  | {
      type: "CartUpdated";
      [k: string]: unknown;
    }
  | {
      type: "StorePriceSheetUpdated";
      [k: string]: unknown;
    }
  | {
      type: "EconInventoryConnected";
      [k: string]: unknown;
    }
  | {
      type: "ItemSchemaInitialized";
      [k: string]: unknown;
    }
  | {
      type: "GcNewSession";
      [k: string]: unknown;
    }
  | {
      type: "GcLostSession";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "IntroFinish";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "IntroNextCamera";
      [k: string]: unknown;
    }
  | {
      class: number;
      type: "PlayerChangeClass";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      seconds: number;
      type: "TfMapTimeRemaining";
      [k: string]: unknown;
    }
  | {
      reason: String;
      type: "TfGameOver";
      [k: string]: unknown;
    }
  | {
      capping_team: number;
      capping_team_score: number;
      type: "CtfFlagCaptured";
      [k: string]: unknown;
    }
  | {
      type: "ControlPointInitialized";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ControlPointUpdateImages";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ControlPointUpdateLayout";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ControlPointUpdateCapping";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ControlPointUpdateOwner";
      [k: string]: unknown;
    }
  | {
      area: number;
      player: number;
      type: "ControlPointStartTouch";
      [k: string]: unknown;
    }
  | {
      area: number;
      player: number;
      type: "ControlPointEndTouch";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "ControlPointPulseElement";
      [k: string]: unknown;
    }
  | {
      int_data: number;
      player: number;
      type: "ControlPointFakeCapture";
      [k: string]: unknown;
    }
  | {
      int_data: number;
      player: number;
      type: "ControlPointFakeCaptureMultiplier";
      [k: string]: unknown;
    }
  | {
      round: String;
      type: "TeamPlayRoundSelected";
      [k: string]: unknown;
    }
  | {
      full_reset: boolean;
      type: "TeamPlayRoundStart";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayRoundActive";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayWaitingBegins";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayWaitingEnds";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayWaitingAboutToEnd";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayRestartRound";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayReadyRestart";
      [k: string]: unknown;
    }
  | {
      seconds: number;
      type: "TeamPlayRoundRestartSeconds";
      [k: string]: unknown;
    }
  | {
      team: number;
      type: "TeamPlayTeamReady";
      [k: string]: unknown;
    }
  | {
      flag_cap_limit: number;
      full_round: number;
      losing_team_num_caps: number;
      round_time: number;
      team: number;
      type: "TeamPlayRoundWin";
      was_sudden_death: number;
      win_reason: number;
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayUpdateTimer";
      [k: string]: unknown;
    }
  | {
      reason: number;
      type: "TeamPlayRoundStalemate";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayOvertimeBegin";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlayOvertimeEnd";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlaySuddenDeathBegin";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlaySuddenDeathEnd";
      [k: string]: unknown;
    }
  | {
      reason: String;
      type: "TeamPlayGameOver";
      [k: string]: unknown;
    }
  | {
      seconds: number;
      type: "TeamPlayMapTimeRemaining";
      [k: string]: unknown;
    }
  | {
      time_remaining: number;
      type: "TeamPlayTimerFlash";
      [k: string]: unknown;
    }
  | {
      seconds_added: number;
      timer: number;
      type: "TeamPlayTimerTimeAdded";
      [k: string]: unknown;
    }
  | {
      cap_team: number;
      cap_time: number;
      cappers: String;
      cp: number;
      cp_name: String;
      team: number;
      type: "TeamPlayPointStartCapture";
      [k: string]: unknown;
    }
  | {
      cappers: String;
      cp: number;
      cp_name: String;
      team: number;
      type: "TeamPlayPointCaptured";
      [k: string]: unknown;
    }
  | {
      cp: number;
      cp_name: String;
      team: number;
      type: "TeamPlayPointLocked";
      [k: string]: unknown;
    }
  | {
      cp: number;
      cp_name: String;
      team: number;
      type: "TeamPlayPointUnlocked";
      [k: string]: unknown;
    }
  | {
      cp: number;
      cp_name: String;
      time_remaining: number;
      type: "TeamPlayCaptureBroken";
      [k: string]: unknown;
    }
  | {
      blocker: number;
      cp: number;
      cp_name: String;
      type: "TeamPlayCaptureBlocked";
      victim: number;
      [k: string]: unknown;
    }
  | {
      carrier: number;
      event_type: number;
      home: number;
      player: number;
      team: number;
      type: "TeamPlayFlagEvent";
      [k: string]: unknown;
    }
  | {
      blue_score: number;
      blue_score_prev: number;
      cappers: String;
      flag_cap_limit: number;
      game_over: number;
      kill_stream_player_1: number;
      kill_stream_player_1_count: number;
      panel_style: number;
      player_1: number;
      player_1_points: number;
      player_2: number;
      player_2_points: number;
      player_3: number;
      player_3_points: number;
      red_score: number;
      red_score_prev: number;
      round_complete: number;
      rounds_remaining: number;
      type: "TeamPlayWinPanel";
      win_reason: number;
      winning_team: number;
      [k: string]: unknown;
    }
  | {
      player: number;
      team: number;
      type: "TeamPlayTeamBalancedPlayer";
      [k: string]: unknown;
    }
  | {
      type: "TeamPlaySetupFinished";
      [k: string]: unknown;
    }
  | {
      alert_type: number;
      type: "TeamPlayAlert";
      [k: string]: unknown;
    }
  | {
      map: String;
      next_map: String;
      text: String;
      type: "TrainingComplete";
      [k: string]: unknown;
    }
  | {
      killer: number;
      type: "ShowFreezePanel";
      [k: string]: unknown;
    }
  | {
      type: "HideFreezePanel";
      [k: string]: unknown;
    }
  | {
      type: "FreezeCamStarted";
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerChangeTeam";
      [k: string]: unknown;
    }
  | {
      score: number;
      type: "LocalPlayerScoreChanged";
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerChangeClass";
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerRespawn";
      [k: string]: unknown;
    }
  | {
      building_type: number;
      object_mode: number;
      remove: number;
      type: "BuildingInfoChanged";
      [k: string]: unknown;
    }
  | {
      disguised: boolean;
      type: "LocalPlayerChangeDisguise";
      [k: string]: unknown;
    }
  | {
      new_value: number;
      old_value: number;
      type: "PlayerAccountChanged";
      [k: string]: unknown;
    }
  | {
      type: "SpyPdaReset";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "FlagStatusUpdate";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      force_upload: boolean;
      type: "PlayerStatsUpdated";
      [k: string]: unknown;
    }
  | {
      type: "PlayingCommentary";
      [k: string]: unknown;
    }
  | {
      target_id: number;
      type: "PlayerChargeDeployed";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      object: number;
      type: "PlayerBuiltObject";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      is_builder: boolean;
      object: number;
      type: "PlayerUpgradedObject";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      object: number;
      type: "PlayerCarryObject";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      object: number;
      type: "PlayerDropObject";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      object_type: number;
      type: "ObjectRemoved";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      assister: number;
      attacker: number;
      index: number;
      object_type: number;
      type: "ObjectDestroyed";
      user_id: number;
      was_building: boolean;
      weapon: String;
      weapon_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      object_type: number;
      type: "ObjectDetonated";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      achievement: number;
      player: number;
      type: "AchievementEarned";
      [k: string]: unknown;
    }
  | {
      type: "SpecTargetUpdated";
      [k: string]: unknown;
    }
  | {
      name_change: boolean;
      new_name: String;
      ready_state: number;
      type: "TournamentStateUpdate";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "TournamentEnableCountdown";
      [k: string]: unknown;
    }
  | {
      type: "PlayerCalledForMedic";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "PlayerAskedForBall";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerBecameObserver";
      [k: string]: unknown;
    }
  | {
      medic_ent_index: number;
      pyro_ent_index: number;
      type: "PlayerIgnitedInv";
      victim_ent_index: number;
      [k: string]: unknown;
    }
  | {
      pyro_ent_index: number;
      type: "PlayerIgnited";
      victim_ent_index: number;
      weapon_id: number;
      [k: string]: unknown;
    }
  | {
      healer: number;
      item_definition_index: number;
      type: "PlayerExtinguished";
      victim: number;
      [k: string]: unknown;
    }
  | {
      builder_id: number;
      dist: number;
      type: "PlayerTeleported";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "PlayerHealedMedicCall";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerChargeReady";
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerWindDown";
      [k: string]: unknown;
    }
  | {
      medic_user_id: number;
      type: "PlayerInvulned";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      players: number;
      speed: number;
      team: number;
      type: "EscortSpeed";
      [k: string]: unknown;
    }
  | {
      progress: number;
      reset: boolean;
      team: number;
      type: "EscortProgress";
      [k: string]: unknown;
    }
  | {
      recede_time: number;
      team: number;
      type: "EscortRecede";
      [k: string]: unknown;
    }
  | {
      type: "GameUIActivated";
      [k: string]: unknown;
    }
  | {
      type: "GameUIHidden";
      [k: string]: unknown;
    }
  | {
      player: number;
      points: number;
      type: "PlayerEscortScore";
      [k: string]: unknown;
    }
  | {
      amount: number;
      ent_index: number;
      type: "PlayerHealOnHit";
      weapon_def_index: number;
      [k: string]: unknown;
    }
  | {
      owner: number;
      target: number;
      type: "PlayerStealSandvich";
      [k: string]: unknown;
    }
  | {
      show: boolean;
      type: "ShowClassLayout";
      [k: string]: unknown;
    }
  | {
      show: boolean;
      type: "ShowVsPanel";
      [k: string]: unknown;
    }
  | {
      amount: number;
      kind: number;
      type: "PlayerDamaged";
      [k: string]: unknown;
    }
  | {
      message: number;
      player: number;
      type: "ArenaPlayerNotification";
      [k: string]: unknown;
    }
  | {
      streak: number;
      team: number;
      type: "ArenaMatchMaxStreak";
      [k: string]: unknown;
    }
  | {
      type: "ArenaRoundStart";
      [k: string]: unknown;
    }
  | {
      blue_score: number;
      blue_score_prev: number;
      cappers: String;
      flag_cap_limit: number;
      panel_style: number;
      player_1: number;
      player_1_damage: number;
      player_1_healing: number;
      player_1_kills: number;
      player_1_lifetime: number;
      player_2: number;
      player_2_damage: number;
      player_2_healing: number;
      player_2_kills: number;
      player_2_lifetime: number;
      player_3: number;
      player_3_damage: number;
      player_3_healing: number;
      player_3_kills: number;
      player_3_lifetime: number;
      player_4: number;
      player_4_damage: number;
      player_4_healing: number;
      player_4_kills: number;
      player_4_lifetime: number;
      player_5: number;
      player_5_damage: number;
      player_5_healing: number;
      player_5_kills: number;
      player_5_lifetime: number;
      player_6: number;
      player_6_damage: number;
      player_6_healing: number;
      player_6_kills: number;
      player_6_lifetime: number;
      red_score: number;
      red_score_prev: number;
      round_complete: number;
      type: "ArenaWinPanel";
      win_reason: number;
      winning_team: number;
      [k: string]: unknown;
    }
  | {
      panel_style: number;
      type: "PveWinPanel";
      win_reason: number;
      winning_team: number;
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "AirDash";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "Landed";
      [k: string]: unknown;
    }
  | {
      damage: number;
      type: "PlayerDamageDodged";
      [k: string]: unknown;
    }
  | {
      big_stun: boolean;
      stunner: number;
      type: "PlayerStunned";
      victim: number;
      victim_capping: boolean;
      [k: string]: unknown;
    }
  | {
      scout_id: number;
      target_id: number;
      type: "ScoutGrandSlam";
      [k: string]: unknown;
    }
  | {
      target_index: number;
      type: "ScoutSlamdollLanded";
      x: number;
      y: number;
      z: number;
      [k: string]: unknown;
    }
  | {
      attached_entity: number;
      bone_angles_x: number;
      bone_angles_y: number;
      bone_angles_z: number;
      bone_index_attached: number;
      bone_position_x: number;
      bone_position_y: number;
      bone_position_z: number;
      is_crit: boolean;
      projectile_type: number;
      shooter: number;
      type: "ArrowImpact";
      [k: string]: unknown;
    }
  | {
      thrower_ent_index: number;
      type: "PlayerJarated";
      victim_ent_index: number;
      [k: string]: unknown;
    }
  | {
      thrower_ent_index: number;
      type: "PlayerJaratedFade";
      victim_ent_index: number;
      [k: string]: unknown;
    }
  | {
      attacker_ent_index: number;
      blocker_ent_index: number;
      type: "PlayerShieldBlocked";
      [k: string]: unknown;
    }
  | {
      pinned: number;
      type: "PlayerPinned";
      [k: string]: unknown;
    }
  | {
      medic: number;
      type: "PlayerHealedByMedic";
      [k: string]: unknown;
    }
  | {
      object: number;
      owner_id: number;
      sapper_id: number;
      type: "PlayerSappedObject";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      is_strange: number;
      is_unusual: number;
      item_def: number;
      method: number;
      player: number;
      quality: number;
      type: "ItemFound";
      wear: number;
      [k: string]: unknown;
    }
  | {
      follow_ent_index: number;
      id: number;
      lifetime: number;
      play_sound: String;
      show_distance: boolean;
      show_effect: boolean;
      text: String;
      type: "ShowAnnotation";
      visibility_bit_field: number;
      world_normal_x: number;
      world_normal_y: number;
      world_normal_z: number;
      world_pos_x: number;
      world_pos_y: number;
      world_pos_z: number;
      [k: string]: unknown;
    }
  | {
      id: number;
      type: "HideAnnotation";
      [k: string]: unknown;
    }
  | {
      type: "PostInventoryApplication";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      time: number;
      type: "ControlPointUnlockUpdated";
      [k: string]: unknown;
    }
  | {
      buff_owner: number;
      buff_type: number;
      type: "DeployBuffBanner";
      [k: string]: unknown;
    }
  | {
      buff_owner: number;
      buff_type: number;
      type: "PlayerBuff";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      attacker: number;
      charged: boolean;
      healing: number;
      type: "MedicDeath";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "OvertimeNag";
      [k: string]: unknown;
    }
  | {
      type: "TeamsChanged";
      [k: string]: unknown;
    }
  | {
      type: "HalloweenPumpkinGrab";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      play_sound: boolean;
      type: "RocketJump";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "RocketJumpLanded";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      play_sound: boolean;
      type: "StickyJump";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "StickyJumpLanded";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      play_sound: boolean;
      type: "RocketPackLaunch";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "RocketPackLanded";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      medic: number;
      type: "MedicDefended";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      amount: number;
      type: "LocalPlayerHealed";
      [k: string]: unknown;
    }
  | {
      type: "PlayerDestroyedPipeBomb";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      object_ent_index: number;
      owner_id: number;
      type: "ObjectDeflected";
      user_id: number;
      weapon_id: number;
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "PlayerMvp";
      [k: string]: unknown;
    }
  | {
      type: "RaidSpawnMob";
      [k: string]: unknown;
    }
  | {
      type: "RaidSpawnSquad";
      [k: string]: unknown;
    }
  | {
      area: number;
      blocked: boolean;
      type: "NavBlocked";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "PathTrackPassed";
      [k: string]: unknown;
    }
  | {
      count: number;
      index: number;
      type: "NumCappersChanged";
      [k: string]: unknown;
    }
  | {
      type: "PlayerRegenerate";
      [k: string]: unknown;
    }
  | {
      index: number;
      object: number;
      type: "UpdateStatusItem";
      [k: string]: unknown;
    }
  | {
      type: "StatsResetRound";
      [k: string]: unknown;
    }
  | {
      type: "ScoreStatsAccumulatedUpdate";
      [k: string]: unknown;
    }
  | {
      type: "ScoreStatsAccumulatedReset";
      [k: string]: unknown;
    }
  | {
      achievement: number;
      type: "AchievementEarnedLocal";
      [k: string]: unknown;
    }
  | {
      amount: number;
      healer: number;
      patient: number;
      type: "PlayerHealed";
      [k: string]: unknown;
    }
  | {
      amount: number;
      building: number;
      healer: number;
      type: "BuildingHealed";
      [k: string]: unknown;
    }
  | {
      item: String;
      type: "ItemPickup";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      initiator: number;
      initiator_score: number;
      killer: number;
      score_type: number;
      target: number;
      target_score: number;
      type: "DuelStatus";
      [k: string]: unknown;
    }
  | {
      assister: number;
      assister_fallback: String;
      attacker: number;
      custom_kill: number;
      damage_bits: number;
      death_flags: number;
      inflictor_ent_index: number;
      silent_kill: boolean;
      stun_flags: number;
      type: "FishNotice";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      assister: number;
      assister_fallback: String;
      attacker: number;
      custom_kill: number;
      damage_bits: number;
      death_flags: number;
      inflictor_ent_index: number;
      silent_kill: boolean;
      stun_flags: number;
      type: "FishNoticeArm";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      assister: number;
      assister_fallback: String;
      attacker: number;
      custom_kill: number;
      damage_bits: number;
      death_flags: number;
      inflictor_ent_index: number;
      silent_kill: boolean;
      stun_flags: number;
      type: "SlapNotice";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      assister: number;
      assister_fallback: String;
      attacker: number;
      custom_kill: number;
      damage_bits: number;
      death_flags: number;
      inflictor_ent_index: number;
      silent_kill: boolean;
      stun_flags: number;
      total_hits: number;
      type: "ThrowableHit";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      type: "PumpkinLordSummoned";
      [k: string]: unknown;
    }
  | {
      type: "PumpkinLordKilled";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "MerasmusSummoned";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "MerasmusKilled";
      [k: string]: unknown;
    }
  | {
      level: number;
      time_remaining: number;
      type: "MerasmusEscapeWarning";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "MerasmusEscaped";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "EyeballBossSummoned";
      [k: string]: unknown;
    }
  | {
      level: number;
      player_ent_index: number;
      type: "EyeballBossStunned";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "EyeballBossKilled";
      [k: string]: unknown;
    }
  | {
      level: number;
      player_ent_index: number;
      type: "EyeballBossKiller";
      [k: string]: unknown;
    }
  | {
      level: number;
      time_remaining: number;
      type: "EyeballBossEscapeImminent";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "EyeballBossEscaped";
      [k: string]: unknown;
    }
  | {
      attacker_player: number;
      boss: number;
      crit: boolean;
      damage_amount: number;
      ent_index: number;
      health: number;
      type: "NpcHurt";
      weapon_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      time: number;
      type: "ControlPointTimerUpdated";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "PlayerHighFiveStart";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "PlayerHighFiveCancel";
      [k: string]: unknown;
    }
  | {
      initiator_ent_index: number;
      partner_ent_index: number;
      type: "PlayerHighFiveSuccess";
      [k: string]: unknown;
    }
  | {
      player_ent_index: number;
      points: number;
      source_ent_index: number;
      type: "PlayerBonusPoints";
      [k: string]: unknown;
    }
  | {
      type: "PlayerUpgraded";
      [k: string]: unknown;
    }
  | {
      cost: number;
      player: number;
      type: "PlayerBuyback";
      [k: string]: unknown;
    }
  | {
      kind: number;
      player: number;
      time: number;
      type: "PlayerUsedPowerUpBottle";
      [k: string]: unknown;
    }
  | {
      type: "ChristmasGiftGrab";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      attacker: number;
      type: "PlayerKilledAchievementZone";
      victim: number;
      zone_id: number;
      [k: string]: unknown;
    }
  | {
      type: "PartyUpdated";
      [k: string]: unknown;
    }
  | {
      type: "PartyPrefChanged";
      [k: string]: unknown;
    }
  | {
      type: "PartyCriteriaChanged";
      [k: string]: unknown;
    }
  | {
      type: "PartyInvitesChanged";
      [k: string]: unknown;
    }
  | {
      match_group: number;
      type: "PartyQueueStateChanged";
      [k: string]: unknown;
    }
  | {
      kind: number;
      steam_id: String;
      text: String;
      type: "PartyChat";
      [k: string]: unknown;
    }
  | {
      steam_id: String;
      type: "PartyMemberJoin";
      [k: string]: unknown;
    }
  | {
      steam_id: String;
      type: "PartyMemberLeave";
      [k: string]: unknown;
    }
  | {
      type: "MatchInvitesUpdated";
      [k: string]: unknown;
    }
  | {
      type: "LobbyUpdated";
      [k: string]: unknown;
    }
  | {
      class: number;
      count: number;
      type: "MvmMissionUpdate";
      [k: string]: unknown;
    }
  | {
      type: "RecalculateHolidays";
      [k: string]: unknown;
    }
  | {
      currency: number;
      type: "PlayerCurrencyChanged";
      [k: string]: unknown;
    }
  | {
      team: number;
      type: "DoomsdayRocketOpen";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "RemoveNemesisRelationships";
      [k: string]: unknown;
    }
  | {
      type: "MvmCreditBonusWave";
      [k: string]: unknown;
    }
  | {
      type: "MvmCreditBonusAll";
      [k: string]: unknown;
    }
  | {
      type: "MvmCreditBonusAllAdvanced";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmQuickSentryUpgrade";
      [k: string]: unknown;
    }
  | {
      type: "MvmTankDestroyedByPlayers";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmKillRobotDeliveringBomb";
      [k: string]: unknown;
    }
  | {
      currency: number;
      player: number;
      type: "MvmPickupCurrency";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "MvmBombCarrierKilled";
      [k: string]: unknown;
    }
  | {
      det_x: number;
      det_y: number;
      det_z: number;
      player: number;
      type: "MvmSentryBusterDetonate";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmScoutMarkedForDeath";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmMedicPowerUpShared";
      [k: string]: unknown;
    }
  | {
      advanced: number;
      max_waves: number;
      type: "MvmBeginWave";
      wave_index: number;
      [k: string]: unknown;
    }
  | {
      advanced: boolean;
      type: "MvmWaveComplete";
      [k: string]: unknown;
    }
  | {
      mission: String;
      type: "MvmMissionComplete";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmBombResetByPlayer";
      [k: string]: unknown;
    }
  | {
      type: "MvmBombAlarmTriggered";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MvmBombDeployResetByPlayer";
      [k: string]: unknown;
    }
  | {
      type: "MvmWaveFailed";
      [k: string]: unknown;
    }
  | {
      type: "MvmResetStats";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "DamageResisted";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      marker_ent_index: number;
      type: "RevivePlayerNotify";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "RevivePlayerStopped";
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      type: "RevivePlayerComplete";
      [k: string]: unknown;
    }
  | {
      type: "PlayerTurnedToGhost";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      damage: number;
      type: "MedigunShieldBlockedDamage";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "MvmAdvWaveCompleteNoGates";
      [k: string]: unknown;
    }
  | {
      currency: number;
      type: "MvmSniperHeadshotCurrency";
      user_id: number;
      [k: string]: unknown;
    }
  | {
      type: "MvmMannhattanPit";
      [k: string]: unknown;
    }
  | {
      type: "FlagCarriedInDetectionZone";
      [k: string]: unknown;
    }
  | {
      type: "MvmAdvWaveKilledStunRadio";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      type: "PlayerDirectHitStun";
      victim: number;
      [k: string]: unknown;
    }
  | {
      sentry_buster: number;
      type: "MvmSentryBusterKilled";
      [k: string]: unknown;
    }
  | {
      path: String;
      type: "UpgradesFileChanged";
      [k: string]: unknown;
    }
  | {
      method: number;
      points: number;
      team: number;
      type: "RdTeamPointsChanged";
      [k: string]: unknown;
    }
  | {
      type: "RdRulesStateChanged";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      custom_kill: number;
      damage_bits: number;
      inflictor_ent_index: number;
      type: "RdRobotKilled";
      user_id: number;
      victim_ent_index: number;
      weapon: String;
      weapon_id: number;
      weapon_log_class_name: String;
      [k: string]: unknown;
    }
  | {
      ent_index: number;
      impulse_x: number;
      impulse_y: number;
      impulse_z: number;
      type: "RdRobotImpact";
      [k: string]: unknown;
    }
  | {
      time: number;
      type: "TeamPlayPreRoundTimeLeft";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ParachuteDeploy";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "ParachuteHolster";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "KillRefillsMeter";
      [k: string]: unknown;
    }
  | {
      loser: number;
      loser_rps: number;
      type: "RpsTauntEvent";
      winner: number;
      winner_rps: number;
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "CongaKill";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "PlayerInitialSpawn";
      [k: string]: unknown;
    }
  | {
      type: "CompetitiveVictory";
      [k: string]: unknown;
    }
  | {
      damage_rank: number;
      healing_rank: number;
      index: number;
      kills_rank: number;
      score_rank: number;
      support_rank: number;
      type: "CompetitiveStatsUpdate";
      [k: string]: unknown;
    }
  | {
      kind: number;
      team: number;
      type: "MiniGameWin";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "SentryOnGoActive";
      [k: string]: unknown;
    }
  | {
      level: number;
      type: "DuckXpLevelUp";
      [k: string]: unknown;
    }
  | {
      type: "QuestLogOpened";
      [k: string]: unknown;
    }
  | {
      type: "SchemaUpdated";
      [k: string]: unknown;
    }
  | {
      type: "LocalPlayerPickupWeapon";
      [k: string]: unknown;
    }
  | {
      amount: number;
      method: number;
      player: number;
      type: "RdPlayerScorePoints";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "DemomanDetStickies";
      [k: string]: unknown;
    }
  | {
      quest_item_id_hi: number;
      quest_item_id_low: number;
      quest_objective_id: number;
      scorer_user_id: number;
      type: "QuestObjectiveCompleted";
      [k: string]: unknown;
    }
  | {
      delta: number;
      player: number;
      type: "PlayerScoreChanged";
      [k: string]: unknown;
    }
  | {
      assister: number;
      cp: number;
      killer: number;
      type: "KilledCappingPlayer";
      victim: number;
      [k: string]: unknown;
    }
  | {
      killer: number;
      type: "EnvironmentalDeath";
      victim: number;
      [k: string]: unknown;
    }
  | {
      attacker: number;
      type: "ProjectileDirectHit";
      victim: number;
      weapon_def_index: number;
      [k: string]: unknown;
    }
  | {
      owner: number;
      type: "PassGet";
      [k: string]: unknown;
    }
  | {
      assister: number;
      points: number;
      scorer: number;
      type: "PassScore";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      owner: number;
      type: "PassFree";
      [k: string]: unknown;
    }
  | {
      catcher: number;
      dist: number;
      duration: number;
      passer: number;
      type: "PassPassCaught";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      type: "PassBallStolen";
      victim: number;
      [k: string]: unknown;
    }
  | {
      blocker: number;
      owner: number;
      type: "PassBallBlocked";
      [k: string]: unknown;
    }
  | {
      amount: number;
      condition: number;
      preventor: number;
      type: "DamagePrevented";
      victim: number;
      [k: string]: unknown;
    }
  | {
      boss: number;
      killer: number;
      type: "HalloweenBossKilled";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "EscapedLootIsland";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "TaggedPlayerAsIt";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MerasmusStunned";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "MerasmusPropFound";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "HalloweenSkeletonKilled";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "SkeletonKilledQuest";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "SkeletonKingKilledQuest";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "EscapeHell";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "CrossSpectralBridge";
      [k: string]: unknown;
    }
  | {
      game: number;
      player: number;
      type: "MiniGameWon";
      [k: string]: unknown;
    }
  | {
      ghost: number;
      reviver: number;
      type: "RespawnGhost";
      [k: string]: unknown;
    }
  | {
      killer: number;
      type: "KillInHell";
      victim: number;
      [k: string]: unknown;
    }
  | {
      collector: number;
      type: "HalloweenDuckCollected";
      [k: string]: unknown;
    }
  | {
      player: number;
      type: "SpecialScore";
      [k: string]: unknown;
    }
  | {
      killer: number;
      type: "TeamLeaderKilled";
      victim: number;
      [k: string]: unknown;
    }
  | {
      collecting_player: number;
      intended_target: number;
      soul_count: number;
      type: "HalloweenSoulCollected";
      [k: string]: unknown;
    }
  | {
      type: "RecalculateTruce";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      spy: number;
      type: "DeadRingerCheatDeath";
      [k: string]: unknown;
    }
  | {
      amount: number;
      healer: number;
      target: number;
      type: "CrossbowHeal";
      [k: string]: unknown;
    }
  | {
      amount: number;
      damaged: number;
      item_definition_index: number;
      mitigator: number;
      type: "DamageMitigated";
      [k: string]: unknown;
    }
  | {
      distance: number;
      pusher: number;
      type: "PayloadPushed";
      [k: string]: unknown;
    }
  | {
      game_over: boolean;
      type: "PlayerAbandonedMatch";
      [k: string]: unknown;
    }
  | {
      line: number;
      panel: number;
      player: number;
      type: "ClDrawline";
      x: number;
      y: number;
      [k: string]: unknown;
    }
  | {
      time: number;
      type: "RestartTimerTime";
      [k: string]: unknown;
    }
  | {
      type: "WinLimitChanged";
      [k: string]: unknown;
    }
  | {
      type: "WinPanelShowScores";
      [k: string]: unknown;
    }
  | {
      type: "TopStreamsRequestFinished";
      [k: string]: unknown;
    }
  | {
      type: "CompetitiveStateChanged";
      [k: string]: unknown;
    }
  | {
      type: "GlobalWarDataUpdated";
      [k: string]: unknown;
    }
  | {
      type: "StopWatchChanged";
      [k: string]: unknown;
    }
  | {
      type: "DsStop";
      [k: string]: unknown;
    }
  | {
      delay: number;
      type: "DsScreenshot";
      [k: string]: unknown;
    }
  | {
      type: "ShowMatchSummary";
      [k: string]: unknown;
    }
  | {
      type: "ExperienceChanged";
      [k: string]: unknown;
    }
  | {
      type: "BeginXpLerp";
      [k: string]: unknown;
    }
  | {
      type: "MatchmakerStatsUpdated";
      [k: string]: unknown;
    }
  | {
      success: boolean;
      type: "RematchVotePeriodOver";
      [k: string]: unknown;
    }
  | {
      type: "RematchFailedToCreate";
      [k: string]: unknown;
    }
  | {
      type: "PlayerRematchChange";
      [k: string]: unknown;
    }
  | {
      type: "PingUpdated";
      [k: string]: unknown;
    }
  | {
      type: "MMStatsUpdated";
      [k: string]: unknown;
    }
  | {
      map_index: number;
      type: "PlayerNextMapVoteChange";
      vote: number;
      [k: string]: unknown;
    }
  | {
      type: "VoteMapsChanged";
      [k: string]: unknown;
    }
  | {
      created: boolean;
      definition_index: number;
      deleted: boolean;
      erase_history: boolean;
      kind: number;
      type: "ProtoDefChanged";
      [k: string]: unknown;
    }
  | {
      dominated: number;
      dominations: number;
      dominator: number;
      type: "PlayerDomination";
      [k: string]: unknown;
    }
  | {
      pushed: number;
      pusher: number;
      type: "PlayerRocketPackPushed";
      [k: string]: unknown;
    }
  | {
      msg: String;
      request: number;
      type: "QuestRequest";
      [k: string]: unknown;
    }
  | {
      msg: String;
      request: number;
      success: boolean;
      type: "QuestResponse";
      [k: string]: unknown;
    }
  | {
      completed: boolean;
      kind: number;
      owner: number;
      quest_definition_index: number;
      scorer: number;
      type: "QuestProgress";
      [k: string]: unknown;
    }
  | {
      attacker: number;
      num_direct_hit: number;
      num_hit: number;
      type: "ProjectileRemoved";
      weapon_def_index: number;
      [k: string]: unknown;
    }
  | {
      type: "QuestMapDataChanged";
      [k: string]: unknown;
    }
  | {
      douser: number;
      igniter: number;
      type: "GasDousedPlayerIgnited";
      victim: number;
      [k: string]: unknown;
    }
  | {
      state: number;
      type: "QuestTurnInState";
      [k: string]: unknown;
    }
  | {
      type: "ItemsAcknowledged";
      [k: string]: unknown;
    }
  | {
      blocker: number;
      type: "CapperKilled";
      victim: number;
      [k: string]: unknown;
    }
  | {
      type: "MainMenuStabilized";
      [k: string]: unknown;
    }
  | {
      type: "WorldStatusChanged";
      [k: string]: unknown;
    }
  | {
      clients: number;
      master: String;
      proxies: number;
      slots: number;
      type: "HLTVStatus";
      [k: string]: unknown;
    }
  | {
      index: number;
      type: "HLTVCameraman";
      [k: string]: unknown;
    }
  | {
      index: number;
      rank: number;
      target: number;
      type: "HLTVRankCamera";
      [k: string]: unknown;
    }
  | {
      index: number;
      rank: number;
      target: number;
      type: "HLTVRankEntity";
      [k: string]: unknown;
    }
  | {
      fov: number;
      offset: number;
      phi: number;
      pos_x: number;
      pos_y: number;
      pos_z: number;
      target: number;
      theta: number;
      type: "HLTVFixed";
      [k: string]: unknown;
    }
  | {
      distance: number;
      in_eye: number;
      inertia: number;
      phi: number;
      target_1: number;
      target_2: number;
      theta: number;
      type: "HLTVChase";
      [k: string]: unknown;
    }
  | {
      text: String;
      type: "HLTVMessage";
      [k: string]: unknown;
    }
  | {
      text: String;
      type: "HLTVTitle";
      [k: string]: unknown;
    }
  | {
      text: String;
      type: "HLTVChat";
      [k: string]: unknown;
    }
  | {
      type: "ReplayStartRecord";
      [k: string]: unknown;
    }
  | {
      cb: number;
      di: number;
      sn: String;
      st: number;
      type: "ReplaySessionInfo";
      [k: string]: unknown;
    }
  | {
      type: "ReplayEndRecord";
      [k: string]: unknown;
    }
  | {
      type: "ReplayReplaysAvailable";
      [k: string]: unknown;
    }
  | {
      error: String;
      type: "ReplayServerError";
      [k: string]: unknown;
    }
  | {
      event_type: GameEventType;
      type: "Unknown";
      values: GameEventValue[];
      [k: string]: unknown;
    };
export type GameEventType =
  | (
      | "server_spawn"
      | "server_changelevel_failed"
      | "server_shutdown"
      | "server_cvar"
      | "server_message"
      | "server_addban"
      | "server_removeban"
      | "player_connect"
      | "player_connect_client"
      | "player_info"
      | "player_disconnect"
      | "player_activate"
      | "player_say"
      | "client_disconnect"
      | "client_beginconnect"
      | "client_connected"
      | "client_fullconnect"
      | "host_quit"
      | "team_info"
      | "team_score"
      | "teamplay_broadcast_audio"
      | "player_team"
      | "player_class"
      | "player_death"
      | "player_hurt"
      | "player_chat"
      | "player_score"
      | "player_spawn"
      | "player_shoot"
      | "player_use"
      | "player_changename"
      | "player_hintmessage"
      | "base_player_teleported"
      | "game_init"
      | "game_newmap"
      | "game_start"
      | "game_end"
      | "round_start"
      | "round_end"
      | "game_message"
      | "break_breakable"
      | "break_prop"
      | "entity_killed"
      | "bonus_updated"
      | "achievement_event"
      | "achievement_increment"
      | "physgun_pickup"
      | "flare_ignite_npc"
      | "helicopter_grenade_punt_miss"
      | "user_data_downloaded"
      | "ragdoll_dissolved"
      | "hltv_changed_mode"
      | "hltv_changed_target"
      | "vote_ended"
      | "vote_started"
      | "vote_changed"
      | "vote_passed"
      | "vote_failed"
      | "vote_cast"
      | "vote_options"
      | "replay_saved"
      | "entered_performance_mode"
      | "browse_replays"
      | "replay_youtube_stats"
      | "inventory_updated"
      | "cart_updated"
      | "store_pricesheet_updated"
      | "econ_inventory_connected"
      | "item_schema_initialized"
      | "gc_new_session"
      | "gc_lost_session"
      | "intro_finish"
      | "intro_nextcamera"
      | "player_changeclass"
      | "tf_map_time_remaining"
      | "tf_game_over"
      | "ctf_flag_captured"
      | "controlpoint_initialized"
      | "controlpoint_updateimages"
      | "controlpoint_updatelayout"
      | "controlpoint_updatecapping"
      | "controlpoint_updateowner"
      | "controlpoint_starttouch"
      | "controlpoint_endtouch"
      | "controlpoint_pulse_element"
      | "controlpoint_fake_capture"
      | "controlpoint_fake_capture_mult"
      | "teamplay_round_selected"
      | "teamplay_round_start"
      | "teamplay_round_active"
      | "teamplay_waiting_begins"
      | "teamplay_waiting_ends"
      | "teamplay_waiting_abouttoend"
      | "teamplay_restart_round"
      | "teamplay_ready_restart"
      | "teamplay_round_restart_seconds"
      | "teamplay_team_ready"
      | "teamplay_round_win"
      | "teamplay_update_timer"
      | "teamplay_round_stalemate"
      | "teamplay_overtime_begin"
      | "teamplay_overtime_end"
      | "teamplay_suddendeath_begin"
      | "teamplay_suddendeath_end"
      | "teamplay_game_over"
      | "teamplay_map_time_remaining"
      | "teamplay_timer_flash"
      | "teamplay_timer_time_added"
      | "teamplay_point_startcapture"
      | "teamplay_point_captured"
      | "teamplay_point_locked"
      | "teamplay_point_unlocked"
      | "teamplay_capture_broken"
      | "teamplay_capture_blocked"
      | "teamplay_flag_event"
      | "teamplay_win_panel"
      | "teamplay_teambalanced_player"
      | "teamplay_setup_finished"
      | "teamplay_alert"
      | "training_complete"
      | "show_freezepanel"
      | "hide_freezepanel"
      | "freezecam_started"
      | "localplayer_changeteam"
      | "localplayer_score_changed"
      | "localplayer_changeclass"
      | "localplayer_respawn"
      | "building_info_changed"
      | "localplayer_changedisguise"
      | "player_account_changed"
      | "spy_pda_reset"
      | "flagstatus_update"
      | "player_stats_updated"
      | "playing_commentary"
      | "player_chargedeployed"
      | "player_builtobject"
      | "player_upgradedobject"
      | "player_carryobject"
      | "player_dropobject"
      | "object_removed"
      | "object_destroyed"
      | "object_detonated"
      | "achievement_earned"
      | "spec_target_updated"
      | "tournament_stateupdate"
      | "tournament_enablecountdown"
      | "player_calledformedic"
      | "player_askedforball"
      | "localplayer_becameobserver"
      | "player_ignited_inv"
      | "player_ignited"
      | "player_extinguished"
      | "player_teleported"
      | "player_healedmediccall"
      | "localplayer_chargeready"
      | "localplayer_winddown"
      | "player_invulned"
      | "escort_speed"
      | "escort_progress"
      | "escort_recede"
      | "gameui_activated"
      | "gameui_hidden"
      | "player_escort_score"
      | "player_healonhit"
      | "player_stealsandvich"
      | "show_class_layout"
      | "show_vs_panel"
      | "player_damaged"
      | "arena_player_notification"
      | "arena_match_maxstreak"
      | "arena_round_start"
      | "arena_win_panel"
      | "pve_win_panel"
      | "air_dash"
      | "landed"
      | "player_damage_dodged"
      | "player_stunned"
      | "scout_grand_slam"
      | "scout_slamdoll_landed"
      | "arrow_impact"
      | "player_jarated"
      | "player_jarated_fade"
      | "player_shield_blocked"
      | "player_pinned"
      | "player_healedbymedic"
      | "player_sapped_object"
      | "item_found"
      | "show_annotation"
      | "hide_annotation"
      | "post_inventory_application"
      | "controlpoint_unlock_updated"
      | "deploy_buff_banner"
      | "player_buff"
      | "medic_death"
      | "overtime_nag"
      | "teams_changed"
      | "halloween_pumpkin_grab"
      | "rocket_jump"
      | "rocket_jump_landed"
      | "sticky_jump"
      | "sticky_jump_landed"
      | "rocketpack_launch"
      | "rocketpack_landed"
      | "medic_defended"
      | "localplayer_healed"
      | "player_destroyed_pipebomb"
      | "object_deflected"
      | "player_mvp"
      | "raid_spawn_mob"
      | "raid_spawn_squad"
      | "nav_blocked"
      | "path_track_passed"
      | "num_cappers_changed"
      | "player_regenerate"
      | "update_status_item"
      | "stats_resetround"
      | "scorestats_accumulated_update"
      | "scorestats_accumulated_reset"
      | "achievement_earned_local"
      | "player_healed"
      | "building_healed"
      | "item_pickup"
      | "duel_status"
      | "fish_notice"
      | "fish_notice__arm"
      | "slap_notice"
      | "throwable_hit"
      | "pumpkin_lord_summoned"
      | "pumpkin_lord_killed"
      | "merasmus_summoned"
      | "merasmus_killed"
      | "merasmus_escape_warning"
      | "merasmus_escaped"
      | "eyeball_boss_summoned"
      | "eyeball_boss_stunned"
      | "eyeball_boss_killed"
      | "eyeball_boss_killer"
      | "eyeball_boss_escape_imminent"
      | "eyeball_boss_escaped"
      | "npc_hurt"
      | "controlpoint_timer_updated"
      | "player_highfive_start"
      | "player_highfive_cancel"
      | "player_highfive_success"
      | "player_bonuspoints"
      | "player_upgraded"
      | "player_buyback"
      | "player_used_powerup_bottle"
      | "christmas_gift_grab"
      | "player_killed_achievement_zone"
      | "party_updated"
      | "party_pref_changed"
      | "party_criteria_changed"
      | "party_invites_changed"
      | "party_queue_state_changed"
      | "party_chat"
      | "party_member_join"
      | "party_member_leave"
      | "match_invites_updated"
      | "lobby_updated"
      | "mvm_mission_update"
      | "recalculate_holidays"
      | "player_currency_changed"
      | "doomsday_rocket_open"
      | "remove_nemesis_relationships"
      | "mvm_creditbonus_wave"
      | "mvm_creditbonus_all"
      | "mvm_creditbonus_all_advanced"
      | "mvm_quick_sentry_upgrade"
      | "mvm_tank_destroyed_by_players"
      | "mvm_kill_robot_delivering_bomb"
      | "mvm_pickup_currency"
      | "mvm_bomb_carrier_killed"
      | "mvm_sentrybuster_detonate"
      | "mvm_scout_marked_for_death"
      | "mvm_medic_powerup_shared"
      | "mvm_begin_wave"
      | "mvm_wave_complete"
      | "mvm_mission_complete"
      | "mvm_bomb_reset_by_player"
      | "mvm_bomb_alarm_triggered"
      | "mvm_bomb_deploy_reset_by_player"
      | "mvm_wave_failed"
      | "mvm_reset_stats"
      | "damage_resisted"
      | "revive_player_notify"
      | "revive_player_stopped"
      | "revive_player_complete"
      | "player_turned_to_ghost"
      | "medigun_shield_blocked_damage"
      | "mvm_adv_wave_complete_no_gates"
      | "mvm_sniper_headshot_currency"
      | "mvm_mannhattan_pit"
      | "flag_carried_in_detection_zone"
      | "mvm_adv_wave_killed_stun_radio"
      | "player_directhit_stun"
      | "mvm_sentrybuster_killed"
      | "upgrades_file_changed"
      | "rd_team_points_changed"
      | "rd_rules_state_changed"
      | "rd_robot_killed"
      | "rd_robot_impact"
      | "teamplay_pre_round_time_left"
      | "parachute_deploy"
      | "parachute_holster"
      | "kill_refills_meter"
      | "rps_taunt_event"
      | "conga_kill"
      | "player_initial_spawn"
      | "competitive_victory"
      | "competitive_stats_update"
      | "minigame_win"
      | "sentry_on_go_active"
      | "duck_xp_level_up"
      | "questlog_opened"
      | "schema_updated"
      | "localplayer_pickup_weapon"
      | "rd_player_score_points"
      | "demoman_det_stickies"
      | "quest_objective_completed"
      | "player_score_changed"
      | "killed_capping_player"
      | "environmental_death"
      | "projectile_direct_hit"
      | "pass_get"
      | "pass_score"
      | "pass_free"
      | "pass_pass_caught"
      | "pass_ball_stolen"
      | "pass_ball_blocked"
      | "damage_prevented"
      | "halloween_boss_killed"
      | "escaped_loot_island"
      | "tagged_player_as_it"
      | "merasmus_stunned"
      | "merasmus_prop_found"
      | "halloween_skeleton_killed"
      | "skeleton_killed_quest"
      | "skeleton_king_killed_quest"
      | "escape_hell"
      | "cross_spectral_bridge"
      | "minigame_won"
      | "respawn_ghost"
      | "kill_in_hell"
      | "halloween_duck_collected"
      | "special_score"
      | "team_leader_killed"
      | "halloween_soul_collected"
      | "recalculate_truce"
      | "deadringer_cheat_death"
      | "crossbow_heal"
      | "damage_mitigated"
      | "payload_pushed"
      | "player_abandoned_match"
      | "cl_drawline"
      | "restart_timer_time"
      | "winlimit_changed"
      | "winpanel_show_scores"
      | "top_streams_request_finished"
      | "competitive_state_changed"
      | "global_war_data_updated"
      | "stop_watch_changed"
      | "ds_stop"
      | "ds_screenshot"
      | "show_match_summary"
      | "experience_changed"
      | "begin_xp_lerp"
      | "matchmaker_stats_updated"
      | "rematch_vote_period_over"
      | "rematch_failed_to_create"
      | "player_rematch_change"
      | "ping_updated"
      | "mmstats_updated"
      | "player_next_map_vote_change"
      | "vote_maps_changed"
      | "proto_def_changed"
      | "player_domination"
      | "player_rocketpack_pushed"
      | "quest_request"
      | "quest_response"
      | "quest_progress"
      | "projectile_removed"
      | "quest_map_data_changed"
      | "gas_doused_player_ignited"
      | "quest_turn_in_state"
      | "items_acknowledged"
      | "capper_killed"
      | "mainmenu_stabilized"
      | "world_status_changed"
      | "hltv_status"
      | "hltv_cameraman"
      | "hltv_rank_camera"
      | "hltv_rank_entity"
      | "hltv_fixed"
      | "hltv_chase"
      | "hltv_message"
      | "hltv_title"
      | "hltv_chat"
      | "replay_startrecord"
      | "replay_sessioninfo"
      | "replay_endrecord"
      | "replay_replaysavailable"
      | "replay_servererror"
    )
  | {
      Unknown: string;
    };
export type GameEventValue =
  | "Local"
  | {
      String: String;
    }
  | {
      Float: number;
    }
  | {
      Long: number;
    }
  | {
      Short: number;
    }
  | {
      Byte: number;
    }
  | {
      Boolean: boolean;
    };
export type GameEventTypeId = number;
export type SendPropIdentifier = string;
export type SendPropValue = Vector | VectorXY | number | number | string | SendPropValue[];
export type ClassId = number;
export type UpdateType = "Preserve" | "Leave" | "Enter" | "Delete";
export type GameEventValueType = "None" | "String" | "Float" | "Long" | "Short" | "Byte" | "Boolean" | "Local";
/**
 * Tick relative to the start of the demo
 */
export type DemoTick = number;
export type SendTableName = string;
export type ServerClassName = string;
export type SendPropFlags = number;
export type SendPropName = string;
export type SendPropType =
  | "Int"
  | "Float"
  | "Vector"
  | "VectorXY"
  | "String"
  | "Array"
  | "DataTable"
  | "NumSendPropTypes";

export interface ConVar {
  key: string;
  value: string;
  [k: string]: unknown;
}
export interface ClassInfoEntry {
  class_id: number;
  class_name: string;
  table_name: string;
  [k: string]: unknown;
}
export interface StringTable {
  client_entries?: StringTableEntry[] | null;
  compressed: boolean;
  entries: [number, StringTableEntry][];
  fixed_user_data_size?: FixedUserDataSize | null;
  max_entries: number;
  name: string;
  [k: string]: unknown;
}
export interface StringTableEntry {
  extra_data?: ExtraData | null;
  text?: string | null;
  [k: string]: unknown;
}
export interface ExtraData {
  byte_len: number;
  data: BitReadStream;
  [k: string]: unknown;
}
export interface BitReadStream {
  bit_length: number;
  data: number[];
  [k: string]: unknown;
}
export interface FixedUserDataSize {
  bits: number;
  size: number;
  [k: string]: unknown;
}
export interface Vector {
  x: number;
  y: number;
  z: number;
  [k: string]: unknown;
}
export interface VGuiMenuMessageData {
  data: String;
  key: String;
  [k: string]: unknown;
}
export interface PacketEntity {
  baseline_index: number;
  delay?: number | null;
  delta?: ServerTick | null;
  entity_index: EntityId;
  in_pvs: boolean;
  props: SendProp[];
  serial_number: number;
  server_class: ClassId;
  update_type: UpdateType;
  [k: string]: unknown;
}
export interface SendProp {
  identifier: SendPropIdentifier;
  index: number;
  value: SendPropValue;
  [k: string]: unknown;
}
export interface VectorXY {
  x: number;
  y: number;
  [k: string]: unknown;
}
export interface EventInfo {
  class_id: ClassId;
  fire_delay: number;
  props: SendProp[];
  reliable: boolean;
  [k: string]: unknown;
}
export interface GameEventDefinition {
  entries: GameEventEntry[];
  event_type: GameEventType;
  id: GameEventTypeId;
  [k: string]: unknown;
}
export interface GameEventEntry {
  kind: GameEventValueType;
  name: string;
  [k: string]: unknown;
}
export interface MessagePacketMeta {
  flags: number;
  sequence_in: number;
  sequence_out: number;
  /**
   * @minItems 2
   * @maxItems 2
   */
  view_angles: [ViewAngles, ViewAngles];
  [k: string]: unknown;
}
export interface ViewAngles {
  angles: Vector;
  local_angles: Vector;
  origin: Vector;
  [k: string]: unknown;
}
export interface UserCmd {
  buttons?: number | null;
  command_number?: number | null;
  impulse?: number | null;
  mouse_dx?: number | null;
  mouse_dy?: number | null;
  /**
   * @minItems 3
   * @maxItems 3
   */
  movement: [number | null, number | null, number | null];
  tick_count?: number | null;
  /**
   * @minItems 3
   * @maxItems 3
   */
  view_angles: [number | null, number | null, number | null];
  weapon_select?: WeaponSelect | null;
  [k: string]: unknown;
}
export interface WeaponSelect {
  select: number;
  subtype?: number | null;
  [k: string]: unknown;
}
export interface ServerClass {
  data_table: SendTableName;
  id: ClassId;
  name: ServerClassName;
  [k: string]: unknown;
}
export interface ParseSendTable {
  name: SendTableName;
  needs_decoder: boolean;
  props: RawSendPropDefinition[];
  [k: string]: unknown;
}
export interface RawSendPropDefinition {
  array_property?: RawSendPropDefinition | null;
  bit_count?: number | null;
  element_count?: number | null;
  flags: SendPropFlags;
  high_value?: number | null;
  identifier: SendPropIdentifier;
  low_value?: number | null;
  name: SendPropName;
  original_bit_count?: number | null;
  prop_type: SendPropType;
  table_name?: SendTableName | null;
  [k: string]: unknown;
}
